[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Trip",
  "enabled": 0,
  "modified": "2025-05-29 11:28:46.369703",
  "module": null,
  "name": "Trip Button",
  "script": "frappe.ui.form.on('Delivery Trip', {\n    refresh: function(frm) {\n        if (frm.doc.status === \"Scheduled\" && !frm.doc.start_time) {\n            frm.add_custom_button(('Start Trip'), function () {\n                frappe.call({\n                    method: \"start_trip_transfer\",\n                    args: {\n                        delivery_trip: frm.doc.name,\n                    },\n                    callback: function() {\n                        frm.reload_doc();\n                        frappe.msgprint(\"Trip started and stock moved to Goods In Transit.\");\n                    }\n                });\n            });\n        }\n\n        if (frm.doc.status === \"In Transit\" && !frm.doc.end_time) {\n            frm.add_custom_button(('End Trip'), function () {\n                frappe.call({\n                    method: \"end_trip_transfer\",\n                    args: {\n                        delivery_trip: frm.doc.name\n                    },\n                    callback: function() {\n                        frm.reload_doc();\n                        frappe.msgprint(\"Trip completed and stock moved to Karen Yoghurt Goods.\");\n                    }\n                });\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 0,
  "modified": "2025-05-29 06:13:30.492184",
  "module": "Upande Kaitet",
  "name": "Auto-fetch Company",
  "script": "frappe.ui.form.on('Work Order', {\n    production_item: function(frm) {\n        if (!frm.doc.production_item) return;\n\n        frappe.db.get_doc('Item', frm.doc.production_item).then(item_doc => {\n            if (item_doc.default_warehouse) {\n                frappe.db.get_doc('Warehouse', item_doc.default_warehouse).then(warehouse_doc => {\n                    if (warehouse_doc.company && frm.doc.company !== warehouse_doc.company) {\n                        frm.set_value('company', warehouse_doc.company);\n                    }\n                });\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 0,
  "modified": "2025-05-29 05:54:34.028541",
  "module": "Upande Kaitet",
  "name": "Auto-set Company on BOM based on Item's Warehouse",
  "script": "frappe.ui.form.on('Work Order', {\n    bom_no: function (frm) {\n        if (!frm.doc.bom_no) return;\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"BOM\",\n                name: frm.doc.bom_no\n            },\n            callback: function (res) {\n                const bom = res.message;\n                if (bom && bom.company) {\n                    frm.set_value(\"company\", bom.company);\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 0,
  "modified": "2025-05-29 07:25:55.344400",
  "module": "Upande Kaitet",
  "name": "Auto-fetch Company from BOM in Work Order",
  "script": "frappe.ui.form.on('Work Order', {\n    bom_no: function (frm) {\n        if (!frm.doc.bom_no) return;\n\n        frappe.db.get_doc('BOM', frm.doc.bom_no).then(bom_doc => {\n            if (bom_doc.company && frm.doc.company !== bom_doc.company) {\n                frm.set_value('company', bom_doc.company);\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 0,
  "modified": "2025-05-29 07:26:02.225504",
  "module": "Upande Kaitet",
  "name": "Populate WIP and Target Warehoise in Work Order",
  "script": "frappe.ui.form.on('Work Order', {\n    // Trigger logic when BOM is manually selected\n    bom_no: function (frm) {\n        set_warehouses_based_on_bom(frm);\n    },\n\n    // Trigger logic when the form is loaded and BOM is already set\n    onload: function (frm) {\n        if (frm.doc.bom_no) {\n            set_warehouses_based_on_bom(frm);\n        }\n    }\n});\n\n// Extracted function so it's reusable\nasync function set_warehouses_based_on_bom(frm) {\n    if (!frm.doc.bom_no) return;\n\n    const { message: bom } = await frappe.db.get_value('BOM', frm.doc.bom_no, 'item');\n    if (!bom || !bom.item) return;\n\n    const item_name = bom.item.toLowerCase();\n\n    frm.set_value('wip_warehouse', 'Pasteurization Unit - KR');\n\n    if (item_name.includes('lala')) {\n        frm.set_value('fg_warehouse', 'Finished Goods - KR');\n    } else if (item_name.includes('vanilla yoghurt') || item_name.includes('strawberry yoghurt')) {\n        frm.set_value('fg_warehouse', 'Yogurt Coldroom - KR');\n    } else {\n        frm.set_value('fg_warehouse', '');\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2025-06-04 13:28:49.787009",
  "module": "Upande Kaitet",
  "name": "Combined Script",
  "script": "frappe.ui.form.on('Work Order', {\n    bom_no: async function (frm) {\n        if (!frm.doc.bom_no) return;\n\n        // Step 1: Fetch BOM details\n        const bom_doc = await frappe.db.get_doc('BOM', frm.doc.bom_no);\n        if (!bom_doc || !bom_doc.item) return;\n\n        const item_name = bom_doc.item.toLowerCase();\n\n        // Step 2: If BOM has a different company, set it first\n        if (bom_doc.company && frm.doc.company !== bom_doc.company) {\n            await frm.set_value('company', bom_doc.company);\n        }\n\n        // Step 3: Set WIP and Target warehouses based on item\n        frm.set_value('wip_warehouse', 'Pasteurization Unit - KR');\n\n        if (item_name.includes('Maziwa Lala')) {\n            frm.set_value('fg_warehouse', 'Yoghurt/Lala Packing - KR');\n        } else if (item_name.includes('yoghurt vanilla') || item_name.includes('yoghurt strawberry ')) {\n            frm.set_value('fg_warehouse', 'Yoghurt/Lala Packing - KR');\n        } else {\n            frm.set_value('fg_warehouse', '');\n        }\n    },\n\n    // Also run this logic when the form is loaded with a BOM pre-selected\n    onload: function (frm) {\n        if (frm.doc.bom_no) {\n            frappe.ui.form.trigger('Work Order', 'bom_no', frm);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-05-29 12:27:07.628366",
  "module": "Upande Kaitet",
  "name": "Update Source Warehouse",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_business_unit(frm) {\n        if (frm.doc.custom_business_unit == \"Westwood Yoghurt\") {\n            frm.doc.set_warehouse = \"Yoghurt Store Karen - KR\";\n            frm.refresh_field('set_warehouse');\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-05-29 17:36:52.386438",
  "module": "Upande Kaitet",
  "name": "Fetch Farm and Business Unit",
  "script": "frappe.ui.form.on('Stock Entry', {\n    stock_entry_type: async function (frm) {\n        if (!frm.doc.stock_entry_type) return;\n\n        // Fetch selected Stock Entry Type document\n        const stock_entry_type = await frappe.db.get_doc('Stock Entry Type', frm.doc.stock_entry_type);\n\n        if (!stock_entry_type) return;\n\n        // Set custom values if available\n        if (stock_entry_type.custom_default_farm) {\n            frm.set_value('custom_farm', stock_entry_type.custom_default_farm);\n        }\n\n        if (stock_entry_type.custom_default_business_unit) {\n            frm.set_value('custom_business_unit', stock_entry_type.custom_default_business_unit);\n        }\n\n        if (stock_entry_type.custom_default_company && frm.doc.company !== stock_entry_type.custom_default_company) {\n            frm.set_value('company', stock_entry_type.custom_default_company);\n        }\n    },\n\n    // BONUS: Run on form load if Stock Entry Type is already selected\n    onload: function (frm) {\n        if (frm.doc.stock_entry_type) {\n            frappe.ui.form.trigger('Stock Entry', 'stock_entry_type', frm);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Card",
  "enabled": 1,
  "modified": "2025-05-29 22:14:29.052775",
  "module": "Upande Kaitet",
  "name": "Start Job Script",
  "script": "frappe.ui.form.on('Job Card', {\n    refresh: function(frm) {\n        // Only apply for Milk Quality Inspection\n        if (frm.doc.operation === \"Milk Quality Inspection\") {\n            frm.fields_dict.quality_inspection.$wrapper.find('button').on('click', function (e) {\n                // If job not started, block the action\n                if (frm.doc.status !== \"Work In Progress\") {\n                    e.preventDefault();\n                    frappe.msgprint(__('Please start the job before creating or selecting a Quality Inspection.'));\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-05-30 12:49:41.043144",
  "module": "Upande Kaitet",
  "name": "Default Source and Target Warehouse",
  "script": "frappe.ui.form.on('Stock Entry', {\n    stock_entry_type: function (frm) {\n        const autoTypes = [\"Milk to Yoghurt BU\", \"Milking\"];\n        const source_warehouse = \"Milk Cooler - KR\";\n        const target_warehouse = \"Pasteurization Unit - KR\";\n\n        if (autoTypes.includes(frm.doc.stock_entry_type)) {\n            (frm.doc.items || []).forEach(item => {\n                frappe.model.set_value(item.doctype, item.name, 's_warehouse', source_warehouse);\n                frappe.model.set_value(item.doctype, item.name, 't_warehouse', target_warehouse);\n            });\n        }\n    },\n\n    items_add: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n        const autoTypes = [\"Milk to Yoghurt BU\", \"Milking\"];\n        const source_warehouse = \"Milk Cooler - KR\";\n        const target_warehouse = \"Pasteurization Unit - KR\";\n\n        if (autoTypes.includes(frm.doc.stock_entry_type)) {\n            frappe.model.set_value(cdt, cdn, 's_warehouse', source_warehouse);\n            frappe.model.set_value(cdt, cdn, 't_warehouse', target_warehouse);\n        }\n    },\n\n    refresh: function (frm) {\n        // Bonus enhancement: re-trigger logic when form loads\n        if (frm.doc.stock_entry_type) {\n            frappe.ui.form.trigger('Stock Entry', 'stock_entry_type');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-05-30 08:05:27.015190",
  "module": "Upande Kaitet",
  "name": "Allow Valuation Rate",
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n\t\t// Set allow_valuation_rate for all existing items\n\t\tfrm.doc.items.forEach(function(item) {\n\t\t\tfrappe.model.set_value(item.doctype, item.name, 'allow_zero_valuation_rate', 1);\n\t\t});\n\t\tfrm.refresh_field('items');\n\t\t\n\t\t// Optional: Periodic check to ensure it stays set\n\t\tfrm.allow_valuation_interval = setInterval(() => {\n\t\t\tfrm.doc.items.forEach(function(item) {\n\t\t\t\tif (!item.allow_valuation_rate) {\n\t\t\t\t\tfrappe.model.set_value(item.doctype, item.name, 'allow_zero_valuation_rate', 1);\n\t\t\t\t}\n\t\t\t});\n\t\t}, 1000);\n\t},\n\t\n\tbefore_save(frm) {\n\t\t// Clear interval before saving\n\t\tif (frm.allow_valuation_interval) {\n\t\t\tclearInterval(frm.allow_valuation_interval);\n\t\t}\n\t}\n});\n\n// Set allow_valuation_rate when new items are added\nfrappe.ui.form.on('Stock Entry Detail', {\n\titems_add(frm, cdt, cdn) {\n\t\tfrappe.model.set_value(cdt, cdn, 'allow_zero_valuation_rate', 1);\n\t},\n\t\n\t// Set after warehouse is selected/changed\n\ts_warehouse(frm, cdt, cdn) {\n\t\tsetTimeout(() => {\n\t\t\tfrappe.model.set_value(cdt, cdn, 'allow_zero_valuation_rate', 1);\n\t\t}, 100);\n\t},\n\t\n\tt_warehouse(frm, cdt, cdn) {\n\t\tsetTimeout(() => {\n\t\t\tfrappe.model.set_value(cdt, cdn, 'allow_zero_valuation_rate', 1);\n\t\t}, 100);\n\t},\n\t\n\t// Set after item is selected/changed\n\titem_code(frm, cdt, cdn) {\n\t\tsetTimeout(() => {\n\t\t\tfrappe.model.set_value(cdt, cdn, 'allow_zero_valuation_rate', 1);\n\t\t}, 200);\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2025-06-03 05:19:55.677560",
  "module": "Upande Kaitet",
  "name": "Stock Entry Type Automation",
  "script": "frappe.ui.form.on('Stock Entry', {\n    onload: async function(frm) {\n        if (\n            frm.is_new() &&\n            frm.doc.material_request &&\n            (frm.doc.purpose === 'Material Issue' || frm.doc.purpose === 'Material Transfer')\n        ) {\n            try {\n                // Fetch Material Request details\n                const material_request = await frappe.db.get_doc('Material Request', frm.doc.material_request);\n\n                const is_issue = material_request.material_request_type === 'Material Issue';\n                const has_milk = material_request.items.some(item =>\n                    item.item_code.toLowerCase().includes('westwood milk')\n                );\n\n                if (is_issue && has_milk) {\n                    // Override defaults\n                    await frm.set_value('stock_entry_type', 'Milk to Yoghurt BU');\n                    await frm.set_value('purpose', 'Material Transfer');  // Correct the purpose\n                    frm.refresh_fields();\n                }\n            } catch (err) {\n                console.error('Error processing Material Request:', err);\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-06-03 05:37:26.276485",
  "module": "Upande Kaitet",
  "name": "Loss Reason Mandatory",
  "script": "frappe.ui.form.on('Stock Entry', {\n    stock_entry_type(frm) {\n        const is_loss = frm.doc.stock_entry_type === 'Yoghurt Production Losses';\n\n        // Mark fields as required (UI-only)\n        frm.fields_dict.items.grid.get_field('loss_reason').df.reqd = is_loss;\n        frm.fields_dict.items.grid.get_field('loss_description').df.reqd = is_loss;\n\n        frm.fields_dict.items.grid.refresh();\n    },\n\n    validate(frm) {\n        if (frm.doc.stock_entry_type === 'Yoghurt Production Losses') {\n            (frm.doc.items || []).forEach((row, i) => {\n                if (!row.custom_loss_reason) {\n                    frappe.throw(`Row ${i + 1}: Loss Reason is required.`);\n                }\n                if (!row.custom_loss_description) {\n                    frappe.throw(`Row ${i + 1}: Loss Description is required.`);\n                }\n            });\n        }\n    },\n\n    onload_post_render(frm) {\n        frm.trigger('stock_entry_type');\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 0,
  "modified": "2025-06-03 08:14:12.947540",
  "module": "Upande Kaitet",
  "name": "Work Order",
  "script": "frappe.ui.form.on('Work Order', {\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1 && frm.doc.status === 'In Process') {\n            frappe.call({\n                method: 'frappe.desk.form.utils.get_linked_docs_count',\n                args: {\n                    doctype: 'Work Order',\n                    name: frm.doc.name,\n                    target_doctypes: ['Job Card']\n                },\n                callback: function(r) {\n                    if (r.message['Job Card'] >= 2 && !frm.doc.custom_weighed_amount) {\n                        frm.set_df_property('custom_weighed_amount', 'reqd', 1);\n                        frm.set_df_property('custom_weighed_uom', 'reqd', 1);\n                        frappe.msgprint(__('Please enter Weighed Amount and UOM before finishing the Work Order.'));\n                    }\n                }\n            });\n        }\n    },\n\n    custom_weighed_amount: function(frm) {\n        if (frm.doc.custom_weighed_amount && !frm.doc.custom_weighed_uom) {\n            frappe.msgprint(__('Please also select the UOM for the weighed amount.'));\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "GPS Readings",
  "enabled": 1,
  "modified": "2025-06-03 07:57:13.515817",
  "module": null,
  "name": "Geo",
  "script": "// In Client Script for GPS Readings\nfrappe.ui.form.on('GPS Readings', {\n    refresh: function(frm) {\n        console.log(\"Current geolocation value:\", frm.doc.geolocation_zwck);\n        \n        // Manually test setting a location\n        frm.set_value('geolocation_zwck', '-1.2921,36.8219').then(() => {\n            console.log(\"Test location set\");\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2025-06-03 07:53:00.971752",
  "module": "Upande Kaitet",
  "name": "Hide Fields in Work Order",
  "script": "frappe.ui.form.on('Work Order', {\n    refresh(frm) {\n        const show_fields = frm.doc.docstatus === 1 && all_operations_completed(frm.doc.operations);\n\n        // Show or hide and set required based on conditions\n        frm.set_df_property('custom_weighed_amount', 'hidden', !show_fields);\n        frm.set_df_property('custom_weighed_amount', 'reqd', show_fields);\n\n        frm.set_df_property('custom_weighed_uom', 'hidden', !show_fields);\n        frm.set_df_property('custom_weighed_uom', 'reqd', show_fields);\n    }\n});\n\n// Helper function\nfunction all_operations_completed(operations) {\n    if (!operations || !operations.length) return false;\n    return operations.every(op => op.status === \"Completed\");\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-06-03 12:41:05.952444",
  "module": "Upande Kaitet",
  "name": "Yoghurt Manufacturing Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n    onload: function(frm) {\n        // Only trigger if the stock entry was created from a Work Order\n        if (frm.doc.work_order && frm.doc.purpose === \"Material Transfer for Manufacture\") {\n            if (frm.doc.stock_entry_type !== \"Yoghurt Manufacture Stock Entry\") {\n                frm.set_value(\"stock_entry_type\", \"Yoghurt Manufacture Stock Entry\");\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Card",
  "enabled": 0,
  "modified": "2025-06-03 13:36:40.780101",
  "module": "Upande Kaitet",
  "name": "Employee Filtering",
  "script": "frappe.ui.form.on('Job Card', {\n    setup: function(frm) {\n        frm.set_query('employee', async function() {\n            const res = await frappe.call({\n                method: 'get_manufacturing_managers'\n            });\n\n            const employees = res.message || [];\n\n            return {\n                filters: [\n                    ['Employee', 'name', 'in', employees]\n                ]\n            };\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quality Inspection",
  "enabled": 0,
  "modified": "2025-06-04 12:57:08.208859",
  "module": "Upande Kaitet",
  "name": "Request Concession Button",
  "script": "frappe.ui.form.on('Quality Inspection', {\n    refresh: function(frm) {\n        // Add the 'Request Concession' button if the status is 'Rejected'\n        if (frm.doc.docstatus === 1 && frm.doc.status === 'Rejected' && !frm.doc.concession_requested) {\n            frm.add_custom_button(__('Request Concession'), function() {\n                frappe.confirm(\n                    __('Are you sure you want to request a concession?'),\n                    function() {\n                        // Call frappe's built-in set_value function via server\n                        frappe.call({\n                            method: 'frappe.client.set_value',\n                            args: {\n                                doctype: 'Quality Inspection',\n                                name: frm.doc.name,\n                                fieldname: {\n                                    status: 'Accepted',\n                                    concession_requested: 1\n                                }\n                            },\n                            callback: function(response) {\n                                if (!response.exc) {\n                                    frappe.msgprint(__('Concession has been requested, and the status is updated to Accepted.'));\n                                    frm.reload_doc();\n                                } else {\n                                    frappe.msgprint(__('There was an error while requesting the concession.'));\n                                }\n                            }\n                        });\n                    }\n                );\n            }).addClass('btn-primary');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quality Inspection",
  "enabled": 0,
  "modified": "2025-06-03 14:22:43.644735",
  "module": "Upande Kaitet",
  "name": "Request Concession 2",
  "script": "frappe.ui.form.on('Quality Inspection', {\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1 && frm.doc.status === 'Rejected' && !frm.doc.concession_requested) {\n            frm.add_custom_button(__('Request Concession'), function() {\n                frappe.confirm(\n                    __('Are you sure you want to request a concession?'),\n                    function() {\n                        // Call the server-side method\n                        frappe.call({\n                            method: 'request_concession',\n                            args: {\n                                quality_inspection_name: frm.doc.name\n                            },\n                            callback: function(r) {\n                                if (r.message && r.message.success) {\n                                    frappe.msgprint(r.message.message);\n                                    frm.reload_doc();\n                                } else if (r.message && !r.message.success) {\n                                    frappe.msgprint(r.message.message);\n                                }\n                            }\n                        });\n                    }\n                );\n            }).addClass('btn-primary');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-05-05 11:51:49.561691",
  "module": null,
  "name": "Amount Calc Based on IGP",
  "script": "frappe.ui.form.on('Sales Order Item', {\n    custom_length(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n        // if (row.item_group && row.custom_length) {\n        //     frappe.call({\n        //         method: 'get_item_group_price',\n        //         args: {\n        //             item_group: row.item_group,\n        //             length: row.custom_length,\n        //             currency: frm.doc.currency\n        //         },\n        //         callback: function(r) {\n                    \n        frappe.model.set_value(cdt, cdn, 'rate', 0);\n        frappe.model.set_value(cdt, cdn, 'stock_uom_rate', 0);\n        frappe.model.set_value(cdt, cdn, 'amount', 0);\n        frappe.msgprint(`No price found for this customer's currency or the selected item. Please set a price to proceed!`);\n    \n        //         }\n        //     });\n        // }\n    },\n    \n    item_code(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n\n        setTimeout(function() {\n            frappe.model.set_value(cdt, cdn, 'rate', 0);\n            frappe.model.set_value(cdt, cdn, 'stock_uom_rate', 0);\n            frappe.model.set_value(cdt, cdn, 'amount', 0);\n            frappe.msgprint(`No price found for this customer's currency or the selected item. Please set a price to proceed!`);\n            \n            // Also make amount field editable\n            cur_frm.fields_dict.items.grid.toggle_enable(\"amount\", true);\n        }, 300);\n    }\n    \n});\n\nfrappe.ui.form.on(\"Sales Order\", {\n    refresh: function(frm) {\n        frm.fields_dict.items.grid.toggle_enable(\"amount\", true);\n    },\n    \n    onload: function(frm) {\n        // Ensure price list doesn't affect anything\n        frm.set_value('ignore_pricing_rule', 1);\n        \n        // Make amount field editable\n        frm.fields_dict.items.grid.toggle_enable(\"amount\", true);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-04-17 10:48:45.348655",
  "module": "Upande Kaitet",
  "name": "SO target warehouse Population",
  "script": "frappe.ui.form.on('Sales Order Item', {\n    custom_source_warehouse: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (!row.custom_source_warehouse) return;\n        \n        const abbr_mapping = {\n            \"BUR\": \"Burguret\",\n            \"TUR\": \"Turaco\",\n            \"PNDK\": \"Pendekeza\",\n        };\n        \n        let source_warehouse = row.custom_source_warehouse;\n        let target_warehouse = null;\n        \n        // Define the warehouse mappings patterns\n        const warehouse_patterns = [\n            {\"from\": \"Grading Forecast - TL\", \"to\": \"Graded Sold - TL\"},\n            {\"from\": \"Available for Sale - TL\", \"to\": \"Graded Sold - TL\"}, \n            {\"from\": \"Dispatch Form\", \"to\": \"Dispatch Sold\"}\n        ];\n        \n        // Try each pattern until we find a match\n        for (let pattern of warehouse_patterns) {\n            if (source_warehouse.includes(pattern.from)) {\n                target_warehouse = source_warehouse.replace(pattern.from, pattern.to);\n                break;\n            }\n        }\n\n        if (target_warehouse) {\n            let final_target_warehouse = \"\";\n            const first_word = target_warehouse.split(\" \")[0];\n            \n            if (first_word == \"BUR\" || first_word == \"TUR\" || first_word == \"PNDK\") {\n                final_target_warehouse = `${abbr_mapping[first_word]} Graded Sold - TL`;\n            } else {\n                final_target_warehouse = target_warehouse;\n            } \n            \n            // Verify warehouse exists before setting\n            frappe.db.get_value('Warehouse', final_target_warehouse, 'name', (r) => {\n                if (r) {\n                    frappe.model.set_value(cdt, cdn, 'warehouse', final_target_warehouse);\n                    console.log(`Set warehouse to ${final_target_warehouse}`);\n                } else {\n                    frappe.show_alert({message:`Target warehouse '${final_target_warehouse}' does not exist`, indicator:'red'});\n                }\n            });\n        } else {\n            frappe.show_alert({message:`Could not determine target warehouse for '${source_warehouse}'`, indicator:'yellow'});\n        }\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Grader QR Code",
  "enabled": 1,
  "modified": "2025-04-08 16:08:22.033556",
  "module": "Upande Kaitet",
  "name": "Set List View Limit to 500(GRADER)",
  "script": "frappe.listview_settings[\"Grader QR Code\"] = {\n    refresh:  function(listview) {\n        listview.page_length =1000;\n        listview.start = 0;\n        listview.refresh();\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-28 12:28:32.692244",
  "module": "Upande Kaitet",
  "name": "Ensure Uppercase in Bay Field",
  "script": "frappe.ui.form.on('Stock Entry Detail', {\n\tcustom_bay(frm, cdt, cdn) {\n\t\tlet row = locals[cdt][cdn]; \n        let value = row.custom_bay || '';\n        frappe.model.set_value(cdt, cdn, 'custom_bay', value.toUpperCase());\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Label Print",
  "enabled": 1,
  "modified": "2025-04-09 16:01:21.217385",
  "module": "Upande Kaitet",
  "name": "Generate Bucket Codes",
  "script": "frappe.ui.form.on('Label Print', {\n\tafter_save(frm) {\n\t    let variety;\n\t    let number_of_labels;\n\t    let doc_name;\n\t    let action;\n\t    let farm;\n\t    let stem_length;\n\t    let bunch_size, grader, day_code;\n\t    \n\t    let args = {\n\t        action : frm.doc.action,\n\t        label_doc_name: frm.doc.name,\n\t        \n\t    };\n\t    \n\t    if (frm.doc.action === 'Harvesting Label') {\n\t        args.variety = frm.doc.item_code;\n    \t\targs.no_of_labels = frm.doc.number_of_labels;\n\n\t    } else if (frm.doc.action === 'Bunch Label') {\n\t        args.variety = frm.doc.variety;\n\t        args.no_of_labels = frm.doc.no_of_labels;\n\t        args.farm = frm.doc.farm;\n\t        args.stem_length = frm.doc.stem_length;\n\t        args.bunch_size = frm.doc.bunch_size;\n\t        args.farm_code = frm.doc.farm_code;\n\t        \n\t    } else if (frm.doc.action === 'Grader Label') {\n\t        args.grader = frm.doc.grader;\n\t        args.no_of_labels = frm.doc.qty_of_labels;\n\t        args.day_code = frm.doc.day_code;\n\t    }\n\t    \n\t    \n\t\t\n\t\tlet bucket_id;\n\t\t\n\t\tfrappe.call({\n\t\t    method: \"upande_kaitet.server_scripts.gen_label_id.generate_id\",\n\t\t    args: args,\n\t\t    callback:(response) => {\n\t\t        console.log(response);\n\t\t    }\n\t\t});\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Harvest",
  "enabled": 1,
  "modified": "2025-03-23 18:50:20.123937",
  "module": "Upande Kaitet",
  "name": "Harvest Scan",
  "script": "frappe.ui.form.on('Harvest', {\n    refresh(frm) {\n        frm.add_custom_button(\"Scan QR Code\", () => {\n            checkAndStartScanner();\n        });\n\n        function checkAndStartScanner() {\n            const { farm, block, blck, bck } = frm.doc;\n\n            if (!farm || (!block && !blck && !bck) ) {\n                return;\n            }\n            \n            if (!window.Html5Qrcode) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://cdnjs.cloudflare.com/ajax/libs/html5-qrcode/2.3.8/html5-qrcode.min.js\";\n                script.onload = () => {\n                    console.log(\"Html5Qrcode library loaded successfully.\");\n                    showQrScannerDialog();\n                };\n                script.onerror = () => {\n                    console.error(\"Failed to load Html5Qrcode library.\");\n                    frappe.msgprint(\"Failed to load QR scanning library. Please check your network connection.\");\n                };\n                document.head.appendChild(script);\n            } else {\n                showQrScannerDialog();\n            }\n        }\n\n        function showQrScannerDialog() {\n            const dialog = new frappe.ui.Dialog({\n                title: \"Scan QR Code\",\n                fields: [\n                    { fieldname: 'qr_scanner', fieldtype: 'HTML', options: '' }\n                ]\n            });\n\n            const $wrapper = dialog.fields_dict.qr_scanner.$wrapper;\n            $wrapper.html('<div id=\"qr-reader\" style=\"width: 100%;\"></div>');\n\n            dialog.show();\n\n            setTimeout(() => {\n                const qrReaderElement = document.getElementById(\"qr-reader\");\n                if (qrReaderElement) {\n                    initializeQrScanner(qrReaderElement, dialog);\n                } else {\n                    console.error(\"QR Reader element not found!\");\n                    frappe.msgprint(\"Error initializing QR scanner. Please try again.\");\n                }\n            }, 300);\n        }\n\n        let isProcessing = false;\n\n        function initializeQrScanner(qrReaderElement, dialog) {\n            const html5QrCode = new Html5Qrcode(\"qr-reader\");\n\n            html5QrCode.start(\n                { facingMode: \"environment\" },\n                {\n                    fps: 15,\n                    qrbox: { width: 250, height: 250 }\n                },\n                async (decodedText, decodedResult) => {\n                    if (isProcessing) return;\n                    isProcessing = true;\n\n                    try {\n                        const { bucket_id} = JSON.parse(decodedText);\n                        \n                        const existingStockEntry = await frappe.db.get_list(\"Stock Entry\",{\n                            filters:  {\n                                \"custom_bucket_id\": bucket_id,\n                                docstatus: 1\n                            },\n                            fields: name\n                        });\n                        \n                        if (existingStockEntry.length > 0) {\n                            frappe.msgprint(`Bucket ID ${bucket_id} is already associated with a stock entry.`);\n                            setTimeout(() => {\n                                frappe.set_route('Form', frm.doctype, 'new');\n                            }, 2000);\n                            \n                            setTimeout(() => {\n                                window.location.reload();\n                            }, 1000);\n                        }\n                            \n                        frm.set_value('bucket_id', bucket_id);\n                        frm.refresh_fields(['item_code', 'bucket_id']);\n                        html5QrCode.stop();\n                        dialog.hide();\n                        \n\n                    } catch (e) {\n                        frappe.msgprint(\"Scanned a Non-Harvesting Label. Please scan a valid Bucket label.\")\n                        setTimeout(() => {\n                            frappe.set_route('Form', frm.doctype, 'new');\n                        }, 2000);\n                        \n                        setTimeout(() => {\n                            window.location.reload();\n                        }, 1000);\n                        console.error(\"Error parsing QR Code:\", error)\n                    }\n\n                    html5QrCode.stop();\n                    dialog.hide();\n                },\n                (errorMessage) => {\n                    console.warn(\"Scanning error:\", errorMessage);\n                }\n            ).catch((err) => {\n                console.error(\"Error starting QR scanner:\", err);\n                frappe.msgprint(\"Unable to access the camera. Please ensure permissions are granted and try again.\");\n            });\n\n            dialog.on(\"hide\", function () {\n                html5QrCode.stop().then(() => {\n                    console.log(\"QR Scanner stopped.\");\n                }).catch((err) => {\n                    console.error(\"Error stopping QR scanner:\", err);\n                });\n            });\n        }\n\n        // Automatically start scanning when farm and block are filled\n        frm.fields_dict.farm.df.onchange = checkAndStartScanner;\n        frm.fields_dict.block.df.onchange = checkAndStartScanner;\n        frm.fields_dict.blck.df.onchange = checkAndStartScanner;\n        frm.fields_dict.bck.df.onchange = checkAndStartScanner;\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-02-22 13:17:55.103138",
  "module": "Upande Kaitet",
  "name": "Archive Employee",
  "script": "frappe.ui.form.on('Stock Entry', {\n    onload: function (frm) {\n        frm.fields_dict['custom_graded_by'].get_query = function() {\n            return {\n                filters: {\n                    'custom_archived': 0\n                }\n            };\n        };\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 0,
  "modified": "2025-03-11 12:55:52.851477",
  "module": "Upande Kaitet",
  "name": "Scan QR Button",
  "script": "frappe.ui.form.on('Scan', {\n    refresh(frm) {\n        frm.add_custom_button(\"Scan QR Code\", () => {\n            \n            const farm = cur_frm.doc.farm;\n            const action = cur_frm.doc.action;\n                        \n            if (!farm || !action) {\n                frappe.throw(\"Please select a farm and action before scanning.\");\n                return;\n            }\n            \n            if (!window.Html5Qrcode) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://unpkg.com/html5-qrcode\";\n                script.onload = () => {\n                    console.log(\"Html5Qrcode library loaded successfully.\");\n                    showQrScannerDialog();\n                };\n                script.onerror = () => {\n                    console.error(\"Failed to load Html5Qrcode library.\");\n                    frappe.msgprint(\"Failed to load QR scanning library. Please check your network connection.\");\n                };\n                document.head.appendChild(script);\n            } else {\n                showQrScannerDialog();\n            }\n            \n            \n            \n            function showQrScannerDialog() {\n                const dialog = new frappe.ui.Dialog({\n                    title: \"Scan QR Code\",\n                    fields: [\n                        { fieldname: 'qr_scanner', fieldtype: 'HTML', options: '' }\n                    ]\n                });\n\n                const $wrapper = dialog.fields_dict.qr_scanner.$wrapper;\n                $wrapper.html('<div id=\"qr-reader\" style=\"width: 100%;\"></div>');\n\n                dialog.show();\n\n                setTimeout(() => {\n                    const qrReaderElement = document.getElementById(\"qr-reader\");\n                    if (qrReaderElement) {\n                        initializeQrScanner(qrReaderElement, dialog);\n                    } else {\n                        console.error(\"QR Reader element not found!\");\n                        frappe.msgprint(\"Error initializing QR scanner. Please try again.\");\n                    }\n                }, 300);\n            }\n            \n            let isProcessing = false;\n            let createStock = false;\n            let boxLabelData  = null;\n            let isPaused = false;\n            let farmPackListDocId = null;\n            let boxStickerDocId = null;\n            let stockEntryDoc;\n            \n            function initializeQrScanner(qrReaderElement, dialog) {\n                const html5QrCode = new Html5Qrcode(\"qr-reader\");\n\n                html5QrCode.start(\n                    { facingMode: \"environment\" }, \n                    {\n                        fps: 15, \n                        qrbox: { width: 250, height: 250 } \n                    },\n                    async (decodedText, decodedResult) => {\n                        if (isProcessing || isPaused) {\n                            return;\n                        }\n                        isProcessing = true;\n                        \n                        \n                        \n                    },\n                    (errorMessage) => {\n                        console.warn(\"Scanning error:\", errorMessage);\n                    }\n                ).catch((err) => {\n                    console.error(\"Error starting QR scanner:\", err);\n                    frappe.msgprint(\"Unable to access the camera. Please ensure permissions are granted and try again.\");\n                });\n\n                dialog.on(\"hide\", function () {\n                    html5QrCode.stop().then(() => {\n                        console.log(\"QR Scanner stopped.\");\n                    }).catch((err) => {\n                        console.error(\"Error stopping QR scanner:\", err);\n                    });\n                });\n            }\n            \n            function getStockEntryIdFromUrl(stockEntryUrl) {\n                const stock_entry_url_arr = stockEntryUrl.split(\"/\");\n                const arrLength = stock_entry_url_arr.length;\n                const stock_entry_id = stock_entry_url_arr[arrLength - 1];\n                \n                return stock_entry_id;\n            }\n            \n            \n            \n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-01-25 20:29:13.185615",
  "module": "Upande Kaitet",
  "name": "Populate Number of Items",
  "script": "frappe.ui.form.on('Stock Entry', {\n    refresh: function(frm){\n        $.each(frm.doc.items, function(i, row){\n            if (row.uom == 'Stems') {\n                row.custom_number_of_stems = row.qty;\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-02-22 14:41:27.648541",
  "module": "Upande Kaitet",
  "name": "Grading Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n    custom_farm: function(frm) {\n        if (frm.doc.stock_entry_type === \"Grading\") {\n            let warehouseMapping = {\n                \"Burguret\": { source: \"Burguret Receiving Cold Store - TL\", target: \"Burguret Graded General - TL\" },\n                \"Turaco\": { source: \"Turaco Receiving Cold Store - TL\", target: \"Turaco Graded General - TL\" },\n                \"Pendekeza\": { source: \"Pendekeza Receiving Cold Store - TL\", target: \"Pendekeza Graded General - TL\" }\n            };\n\n            let selectedFarm = frm.doc.custom_farm;\n\n            if (selectedFarm && warehouseMapping[selectedFarm]) {\n                frm.set_value(\"from_warehouse\", warehouseMapping[selectedFarm].source);\n                frm.set_value(\"to_warehouse\", warehouseMapping[selectedFarm].target);\n            }\n        }\n    },\n    \n    custom_bunched_by: function(frm) {\n        if (frm.doc.stock_entry_type === \"Grading\") {\n            if (frm.doc.custom_bunched_by) {\n                let bunched_by_value = frm.doc.custom_bunched_by;\n\n                if (frm.doc.items && frm.doc.items.length > 0) {\n                    frm.doc.items.forEach((item, idx) => {\n                        frappe.model.set_value(item.doctype, item.name, 'uom', bunched_by_value); \n                    });\n                \n                } else {\n                    frappe.throw(\"No items found in the child table.\");\n                }\n\n            }\n        }\n    },\n\n    stock_entry_type: function(frm) {\n        if (frm.doc.stock_entry_type === \"Grading\") {\n            frm.trigger(\"custom_farm\");\n            frm.trigger(\"custom_bunched_by\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-31 20:44:08.467268",
  "module": "Upande Kaitet",
  "name": "Field Rejects Stock Entry",
  "script": "// frappe.ui.form.on('Stock Entry', {\n//     custom_greenhouse: function(frm) {\n//         if (frm.doc.stock_entry_type === \"Field Rejects\") {\n//             const greenhouse = frm.doc.custom_greenhouse;\n            \n//             let warehouseMapping = {\n//                 \"Burguret\":{ target: `${greenhouse}` },\n//                 \"Turaco\":{ target: `${greenhouse}`},\n//                 \"Pendekeza\": { target: `${greenhouse}` }\n//             };\n            \n//             let selectedFarm = frm.doc.custom_farm;\n\n//             if (selectedFarm && warehouseMapping[selectedFarm]) {\n//                 // frm.set_value(\"from_warehouse\", warehouseMapping[selectedFarm].source);\n//                 frm.set_value(\"to_warehouse\", warehouseMapping[selectedFarm].target);\n//             }\n//         }\n//     },\n\n//     stock_entry_type: function(frm) {\n//         if (frm.doc.stock_entry_type === \"Field Rejects\") {\n//             frm.trigger(\"custom_greenhouse\");\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-11 16:53:28.012126",
  "module": "Upande Kaitet",
  "name": "Qr Code gen",
  "script": "frappe.ui.form.on('Stock Entry', {\n    before_submit: function(frm) {\n        if (frm.doc.docstatus === 0 && ( frm.doc.stock_entry_type === 'Grading' || frm.doc.stock_entry_type === 'Grading without Receiving') ) {\n            \n            const grading_details = {\n                \"name\": frm.doc.name,\n                \"variety\": frm.doc.items[0].item_code,\n                \"grader\": frm.doc.custom_graded_by,\n                \"qty\": frm.doc.items[0].qty,\n            };\n            \n            const response = frappe.call({\n                method: \"upande_kaitet.server_scripts.qr_code_generator.generate_qr_code\",\n                args: {\n                    stock_entry_details: JSON.stringify(grading_details)\n                },\n            });\n            \n           \n            \n        }\n    },\n\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-02-16 13:38:22.614916",
  "module": "Upande Kaitet",
  "name": "Scan Data Field Listener",
  "script": "frappe.ui.form.on('Scan', {\n    refresh(frm) {\n        if (!frm.fields_dict.scan_data.$wrapper.hasClass('scan-data-bound')) {\n            frm.fields_dict.scan_data.$wrapper.on('change', function () {\n                frm.script_manager.trigger('scan_data');\n            });\n\n            frm.fields_dict.scan_data.$wrapper.addClass('scan-data-bound');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-05-03 19:33:06.828252",
  "module": "Upande Kaitet",
  "name": "Scan Via Honeywell",
  "script": "frappe.ui.form.on('Scan', {\n\trefresh(frm) {\n\t    toggle_scan_data_field(frm);\n\t},\n\t\n\tfarm(frm) {\n\t    toggle_scan_data_field(frm);\n\t},\n\t\n\taction(frm) {\n\t    toggle_scan_data_field(frm);\n\t},\n\t\n\t\n\t\n\tasync scan_data(frm) {\n\t    let audio = new Audio('/assets/upande_kaitet/sounds/store-scanner-beep-90395.mp3');\n\n\t    let scan_value = frm.doc.scan_data;\n\t    let farm = frm.doc.farm;\n        let action = frm.doc.action;\n        let boxStickerDocId = frm.doc.box_sticker || null;\n\n\n\t    if (scan_value && !frm.is_processing_stock_entry) {\n\t        frm.is_processing_stock_entry = true;\n\t        frm.set_df_property('scan_data', 'read_only', 1);\n\n\t        if (action === 'Packing') {\n\t            if (!frm.doc.opl_data) {\n\t               // Check if scan_value is the opl url\n\t               if (scan_value.includes('order-pick-list')) {\n\t                   \n\t                    frm.set_value('opl_data', scan_value);\n    \t                const oplId = scan_value.split('/').pop();\n    \t                \n                        const oplDoc = await frappe.db.get_doc(\"Order Pick List\", oplId);\n\t                   \n\t                   if (oplDoc.docstatus == 2) {\n    \t                    frappe.throw(\"This Order Pick List is cancelled. Request the updated Order Pick List\")\n    \t                }\n    \t                \n    \t                frm.set_value('order_pick_list', oplId);\n                        audio.play();\n    \t                frappe.msgprint('Order Pick List scanned. Now scan bunch labels.');\n\t               } else {\n\t                    frm.set_df_property('scan_data', 'read_only', 0);\n\t                    frm.set_value('scan_data', '');\n\t                    frappe.throw(\"Please Scan a valid Order Pick List\");\n\t               }\n\t                \n\t                \n\t                frm.set_df_property('scan_data', 'read_only', 0);\n\t                frm.set_value('scan_data', '');\n\n\n\t                frm.is_processing_stock_entry = false;\n\t                \n\t                setTimeout(() => {\n                        frm.save();\n                    }, 50);\n\n                    \n\t            } else {\n\n\t                let bunchLabelData = scan_value;\n\t                try {\n                        await process_bunch_scan(frm.doc.opl_data, bunchLabelData, farm, action, frm, audio);\n                        // frappe.msgprint('Bunch scanned. Scan next bunch or Close Box');\n                        frm.set_df_property('scan_data', 'read_only', 0);\n                        frm.set_value('scan_data', '');\n                    } catch (error) {\n                        if (error.message.toLowerCase.includes(\"this bunch has not been graded on the system\")) {\n                            console.log(error.message);\n                        } else {\n                            frappe.msgprint(`Error processing bunch scan: ${error.message}`);\n                        }\n                        \n                    }\n\t                \n                    frm.set_df_property('scan_data', 'read_only', 0);\n\t                frm.set_value('scan_data', '');\n\t                frm.is_processing_stock_entry = false;\n\t            }\n\t           \n\t            \n\t        } else if (action === 'Grading') {\n\t            // Start with fetching the grader's name.\n\t            //If it is not a grader label and it's the first scan(grader field is not populated), throw error telling user to scan grader label first.\n\t            const data = JSON.parse(scan_value);\n\t            const bunchLabelData = data;\n\t            \n\t            if (!frm.doc.grader) {\n\t               if (!data.grader ) {\n    \t               frappe.throw(\"Please scan the Grader label first!\");\n    \t           }\n    \t           \n    \t            //Store the grader in the grader field\n\t                frm.set_value('grader', data.grader);\n\t                audio.play();\n\t                frappe.msgprint('Grader Label scanned. Now scan bunch labels.');\n                    frm.set_df_property('scan_data', 'read_only', 0);\n                    frm.set_value('scan_data', '');\n    \n    \n                    frm.is_processing_stock_entry = false;\n                    \n                    setTimeout(() => {\n                        frm.save();\n                    }, 250);\n                    \n    \t           \n\t            } else {\n\t                \n\t                \n                    try {\n                        await process_grading_bunch_scan(bunchLabelData, farm, action, frm, audio);\n                        frappe.msgprint(`Bunch scanned successfully. Scan next bunch belonging to ${frm.doc.graders_name}!`);\n                        frm.set_df_property('scan_data', 'read_only', 0);\n                        frm.set_value('scan_data', '');\n                    } catch (error) {\n                        \n                        if (error.message.includes('Bunch has already been scanned.')) {\n                            console.log('Bunch already scanned');\n                        } else {\n                            frappe.msgprint(`Error processing bunch scan: ${error.message}`);\n                        }\n                        \n                        \n                        \n                    }\n\t                \n                    frm.set_df_property('scan_data', 'read_only', 0);\n\t                frm.set_value('scan_data', '');\n\t                frm.is_processing_stock_entry = false;\n\t                \n\t                setTimeout(() => {\n                        frm.save();\n                    }, 250);\n\t            }\n\t           \n\t           \n\t            \n\t        } else if (action === 'Receiving') {\n                trigger_stock_entry(scan_value, farm, action, audio).finally(() => {\n                    frm.set_df_property('scan_data', 'read_only', 0);\n                    frm.set_value('scan_data', '');\n                    frm.is_processing_stock_entry = false;\n                    setTimeout(() => {\n                        frm.save();\n                    }, 250);\n                });\n            } else if (action === 'Receiving Quarantined') {\n                await trigger_stock_entry(scan_value, farm, action).finally(() => {\n                    frm.set_df_property('scan_data', 'read_only', 0);\n                    frm.set_value('scan_data', '');\n                    frm.is_processing_stock_entry = false;\n                });\n                \n            } else if (action === 'Grading Check') {\n                // let stockEntryName;\n                // let scan_check_doc;\n\n                // if (!frm.doc.checking_label) {\n                //     scan_check_doc = frappe.model.get_new_doc('Scan Check');\n                    \n                //     frm.doc.scan_check_id = scan_check_doc.name;\n                    \n                //     frappe.msgprint(`Created Scan Check: ${scan_check_doc.name}`);\n                    \n                //     frm.doc.checking_label = 1;\n                //     await frm.save();\n                    \n                // }\n                \n                // scan_check_doc = await frappe.db.get_doc('Scan Check', frm.doc.scan_check_id)\n                \n                let variety, qty, grower, uom, harvester, greenhouse, block__bed_number, stockEntryDoc, items,\n                    stem_length, graded_by, bunched_by;\n                    \n                if ( scan_value.includes(\"farm\") && scan_value.includes(\"variety\") ) {\n                    \n                    const bunchData = JSON.parse(scan_value);\n    \n                    const existingEntries = await frappe.db.get_list('Stock Entry', {\n                        fields: ['name', 'custom_bunch_id'],\n                        filters: {\n                            custom_bunch_id: bunchData.bunch_id\n                        },\n                        limit: 1\n                    });\n                    \n                    if (existingEntries.length === 0) {\n                        frappe.msgprint(\"Bunch Status: NOT GRADED\");\n                    } else {\n                        audio.play();\n                        frappe.msgprint(\"Bunch Status: GRADED\");\n                    }\n                    \n                // This is harvesting qr code data\n                } else if (scan_value.startsWith('BUCKET')) {\n                    \n                    // frappe.msgprint(`Harvester: ${harvester}, Greenhouse: ${greenhouse}, Bay: ${block__bed_number}, Variety: ${variety}, No. of Stems: ${qty} `);\n                }\n                \n                \n            \n                frm.set_df_property('scan_data', 'read_only', 0);\n                frm.set_value('scan_data', '');\n                frm.is_processing_stock_entry = false;\n                \n                \n                \n                setTimeout(() => {\n                    frm.save();\n                }, 1000);\n                \n            } \n\t    }\n\t}\n\t\n});\n\nasync function process_grading_bunch_scan(bunchLabelData, farm, action, frm, audio) {\n    \n    try {\n        // Get the stock entry with the bunch Id\n        // Check if bunch is scanned via the custom_scanned_grading field\n        const existingEntry = await frappe.db.get_list('Stock Entry', {\n            fields: ['name', 'custom_scanned_grading'],\n            filters: {\n                custom_bunch_id: bunchLabelData.bunch_id\n            },\n            limit: 1\n        });\n        \n       \n        // Check if bunch is already scanned\n        if (existingEntry.length > 0 && existingEntry[0].custom_scanned_grading === 1) {\n            frappe.throw('Bunch has already been scanned.');\n            return;\n        }\n        \n        // Create a new stock entry\n        const stockEntry = frappe.model.get_new_doc('Stock Entry');\n\n        stockEntry.stock_entry_type = 'Grading';\n        \n        stockEntry.from_warehouse = `${farm} Receiving Cold Store - TL`;\n        \n        // Temporary for a week\n        stockEntry.to_warehouse = `${farm} Available for Sale - TL`;\n        stockEntry.custom_farm = farm;\n        stockEntry.custom_graded_by = frm.doc.grader;\n        stockEntry.custom_stem_length = bunchLabelData.stem_length;\n        stockEntry.custom_bunched_by = bunchLabelData.bunch_size;\n        stockEntry.custom_bunch_id = bunchLabelData.bunch_id;\n        stockEntry.custom_scanned_grading = 1;\n\n        stockEntry.items = [{\n            item_code: bunchLabelData.variety,\n            uom: bunchLabelData.bunch_size,\n            qty: 1\n        }];\n\n        await frappe.db.insert(stockEntry);\n        audio.play();\n        frappe.msgprint('Stock transfered successfully.');\n    } catch (error) {\n\n        frappe.throw(__('Error creating Stock Entry: ') + error.message);\n        \n        \n    }\n    \n}\n\nlet farmPackListDocId = null;\n\n\n\nfunction getNameFromUrl(url) {\n    const urlArray = url.split(\"/\");\n    const arrayLength = urlArray.length;\n    const name = urlArray[arrayLength - 1];\n    \n    return name;\n}\n\n\n\nasync function trigger_stock_entry(scan_value, farm, action, audio) {\n    await createStockEntry(scan_value, farm, action, audio);\n    \n    if (action === 'Receiving') {\n        frappe.msgprint(`Received Bucket and Created Stock Entry successfully`);\n        frappe.msgprint(``)\n    } else if (action === 'Receiving Quarantined') {\n        frappe.msgprint(`Received and moved Bucket to quarantine`);\n    }\n    \n}\n\n\n\nasync function process_bunch_scan(opl_url, bunchLabelData, farm, action, frm, audio) {\n        \n    const oplName = getNameFromUrl(opl_url);\n    \n    const bunchData = JSON.parse(bunchLabelData)\n    \n    const existingEntries = await frappe.db.get_list('Stock Entry', {\n        fields: ['name', 'custom_bunch_id'],\n        filters: {\n            custom_bunch_id: bunchData.bunch_id\n        },\n        limit: 1\n    });\n\n    // If no matching stock entry is found\n    if (existingEntries.length === 0) {\n        frappe.throw(`This bunch has not been graded in the system. Perform the grading scan on it to enable packing: ${bunchData.bunch_id}`);\n    }\n    const bunchStockEntryName = existingEntries[0].name;\n    const stockEntryUrl = `/app/stock-entry/${bunchStockEntryName}`;\n    let bunchName;\n    let previouslyScannedItems;\n    let previously_scanned_items_list\n    \n    let totalBunches = 0;\n    let scannedBunches = 0;\n    \n    let stockEntryDoc;\n    \n    \n    try {\n        stockEntryDoc = await frappe.db.get_doc('Stock Entry', bunchStockEntryName);\n    } catch (error) {\n        frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n    }\n    \n    if (stockEntryDoc.custom_scanned_packing ) {\n        frappe.msgprint(\"Bunch aready scanned!\");\n        return;\n    }\n    \n    // frappe.call({\n    //     method: \"upande_kaitet.server_scripts.update_custom_scanned.update_custom_scanned\",\n    //     args: { stock_entry_name: stockEntryName }\n    // });\n    \n    // returns an object with total items and scanned items\n    let varietyMatch = {};\n    \n    \n    try {\n        varietyMatch = await validateLabels(oplName, bunchLabelData, previouslyScannedItems, frm);\n        bunchName = bunchData.variety;\n        \n        if (!varietyMatch.valid) {\n            frappe.throw(`${bunchName} does not match the Order Pick List!`);\n        }\n    } catch (error) {\n        frappe.throw(`Error validating labels: ${error}`);\n        return;\n    }\n    \n    const box_id = varietyMatch.box_number;\n    const box_label = varietyMatch.box_label;\n\n    // Add bunch detail to scanned_items child table\n    const newBunchDetails = {\n        variety: bunchData.variety,\n        bunch_size: bunchData.bunch_size,\n        number_of_bunches: 1,\n    };\n    \n\n    totalBunches = frm.doc.total_bunches;\n    totalScanned = varietyMatch.scannedItems + 1;\n    \n    frm.set_value('scanned_bunches', totalScanned);\n    frappe.msgprint(`${totalScanned} of ${totalBunches} scanned`)\n\n    await createOrGetFarmPackList(oplName, bunchStockEntryName, box_id, box_label, totalBunches);\n    \n    // Mark the bunch as scanned\n    frappe.call({\n        method: \"upande_kaitet.server_scripts.update_custom_scanned.update_custom_scanned\",\n        args: { \n            stock_entry_name: bunchStockEntryName,\n            action: action,\n            oplName: oplName,\n        }\n    });\n    \n    audio.play();\n    frm.save();\n    \n}\n\n\nasync function createOrGetFarmPackList(oplName, bunchStockEntryName, box_id, box_label, totalBunches) {\n\n    const { sales_order, farm } = await getSalesOrderAndFarmFromOPL(oplName);\n    \n    if (!sales_order || farm == \"Unknown\" ) {\n        frappe.throw(\"Sales Order or Warehouse details missing in Order Pick List.\");\n        return;\n    }\n    \n    const existingFPL = await frappe.db.get_list(\"Farm Pack List\", {\n        filters: {\n            custom_sales_order: sales_order,\n            custom_farm: farm\n        },\n        fields: [\"name\", \"docstatus\"]\n        \n    });\n    \n    const isSubmitted = existingFPL.some(fpl => fpl.docstatus === 1);\n    \n    if (isSubmitted) {\n        frappe.throw(\"Farm Pack List already submitted. Check your Order Pick List and scan again\")\n    }\n    \n    if (existingFPL.length > 0) {\n        farmPackListDocId = existingFPL[0].name;\n        await addBunchToFarmPackList(farmPackListDocId, bunchStockEntryName, oplName, farm, box_id, box_label);\n        // frappe.msgprint(`Bunch added to existing Farm Pack List: ${farmPackListDocId}`);\n    } else {\n        await createFarmPackListEntry(bunchStockEntryName, oplName, farm, box_id, box_label, totalBunches);\n    }\n}\n\n\n\nasync function createFarmPackListEntry(bunchStockEntryName, oplName, farm, box_id, box_label, totalBunches) {\n    try {\n        const orderId = oplName;\n        const stockEntryId = bunchStockEntryName;\n        \n        // Fetch Sales Order & Stock Entry\n        const orderPick = await frappe.db.get_doc(\"Order Pick List\", orderId);\n        \n        const stockEntry = await frappe.db.get_doc(\"Stock Entry\", stockEntryId);\n    \n        if (!orderPick || !stockEntry || !stockEntry.items.length) {\n            frappe.throw(\"Invalid Sales Order or Stock Entry data\");\n        }\n    \n        const sourceWarehouse = `${farm} Graded Sold - TL`;\n        \n        const itemCode = stockEntry.items[0].item_code;\n        const uom = stockEntry.items[0].uom;\n        const stem_length = stockEntry.custom_stem_length;\n        \n        // Quantity scanned should always be one per scan\n        const quantity = 1;\n        const customerId = orderPick.customer;\n        const sales_order_id = orderPick.sales_order;\n        \n        // Check the opl for the row that matches the variety \n    \n        \n        \n        const stem_from_bunch = {\n            \"Bunch (5)\": 5,\n            \"Bunch (6)\": 6,\n            \"Bunch (10)\": 10,\n            \"Bunch (12)\": 12,\n            \"Bunch (25)\": 25,\n        } \n        \n        const bunch_stems = stem_from_bunch[uom];\n\n        // Get box id from box label\n        // const boxLabelDoc = await frappe.db.get_doc('Box Label', boxStickerDocId);\n        // const boxId = boxLabelDoc.box_number;\n        \n        // Create new Farm Pack List document\n        const packListDoc = frappe.model.get_new_doc(\"Farm Pack List\");\n        packListDoc.custom_sales_order = sales_order_id;\n        packListDoc.custom_farm = farm;\n        packListDoc.custom_order_pick_list = orderId;\n        packListDoc.custom_picked_total_stems = totalBunches;\n        packListDoc.pack_list_item = [{\n            item_code: itemCode,\n            bunch_uom: uom,\n            bunch_qty: quantity,\n            source_warehouse: sourceWarehouse,\n            sales_order_id: sales_order_id,\n            customer_id: customerId,\n            custom_number_of_stems: bunch_stems,\n            stem_length: stem_length,\n            box_id: box_id,\n            custom_box_label: box_label,\n            custom_opl_id: orderId,\n        }];\n        \n        // Save document\n        const savedDoc = await frappe.db.insert(packListDoc);\n        \n        farmPackListDocId = savedDoc.name;\n    \n        // frappe.msgprint(\"Farm Pack List entry created successfully!\");\n    } catch (error) {\n        console.error(\"Error saving Farm Pack List:\", error);\n        frappe.throw(`Error saving Farm Pack List: ${error.message}`);\n    }\n    \n} \n\n\n\nasync function addBunchToFarmPackList(farmPackListDocId, bunchStockEntryName, oplName, farm, box_id, box_label) {\n    \n    // Get box id from box label\n    // const boxLabelDoc = await frappe.db.get_doc('Box Label', boxStickerDocId);\n    // const boxId = boxLabelDoc.box_number;\n    // If box Id is different from the existing one and variety is same, place it on another row\n    try {\n        await frappe.call({\n            method: 'upande_kaitet.server_scripts.update_farm_pack_list.add_bunch_to_farm_pack_list',\n            args: {\n                farm_pack_list_doc_id: farmPackListDocId,\n                bunch_SE_name: bunchStockEntryName,\n                opl_name: oplName, \n                farm: farm,\n                box_id: box_id,\n                box_label: box_label,\n            },\n            callback: function (response) {\n                // frappe.msgprint(`Added bunch to Farm Pack List: ${farmPackListDocId}`);\n            }\n        });\n    } catch (error) {\n        console.error('Error adding bunch to Farm Pack List:', error);\n        frappe.throw(`Error adding bunch to Farm Pack List: ${error}`);\n    }\n}\n\n\n\nasync function getSalesOrderAndFarmFromOPL(oplName) {\n    const oplDoc = await frappe.db.get_doc('Order Pick List', oplName);\n    \n    let farm = \"\";\n    \n    const abbr_mapping = {\n        \"BUR\": \"Burguret\",\n        \"TUR\": \"Turaco\",\n        \"PNDK\": \"Pendekeza\",\n    }\n    \n    const farmName = oplDoc.locations[0].warehouse?.split(\" \")[0]\n                    || oplDoc.source_warehouse?.split(\" \")[0]\n                    || oplDoc.locations[0].custom_source_warehouse?.split(\" \")[0]\n                    || \"Unknown\";\n                    \n    \n    if(farmName == \"BUR\" || farmName == \"TUR\" || farmName == \"PNDK\") {\n        farm = abbr_mapping[farmName]\n    } else {\n        farm = farmName\n    }\n    \n    return {\n        sales_order: oplDoc.sales_order,\n        farm: farm\n    };\n}\n\nasync function validateLabels(oplName, bunchLabelData, scannedItems, frm) {\n    const { sales_order, farm } = await getSalesOrderAndFarmFromOPL(oplName);\n    let orderPickVariety;\n    let stockEntryUOM;\n    let stockEntryVariety;\n    \n    // Total bunches should be fetched from the OPL row for the variety\n    let totalBunches = 0;\n    let scannedBunches = 0;\n    let box_number = 0;\n    let box_label = \"\";\n    \n    const bunchData = JSON.parse(bunchLabelData);\n    \n    try {\n        stockEntryVariety = bunchData.variety;\n        stockEntryUOM = bunchData.bunch_size;\n    } catch (error) {\n        frappe.throw(`Error fetching bunch data: ${error}`);\n    }\n    \n    const existingFPL = await frappe.db.get_list(\"Farm Pack List\", {\n        filters: {\n            custom_sales_order: sales_order,\n            custom_farm: farm\n        },\n        fields: [\"name\", \"docstatus\"]\n    });\n    \n    const isSubmitted = existingFPL.some(fpl => fpl.docstatus === 1);\n    \n    if (isSubmitted) {\n        frappe.throw(\"Farm Pack List already submitted. Check your Order Pick List and scan again\");\n    }\n    \n    try {\n        const orderPickList = await frappe.db.get_doc(\"Order Pick List\", oplName);\n        \n        if (!orderPickList || !orderPickList.locations || orderPickList.locations.length === 0) {\n            frappe.msgprint(`No valid Order Pick List found for ${oplName}`);\n            return { totalItems: 0, scannedItems: 0, valid: false };\n        }\n        \n        totalBunches = orderPickList.locations.reduce((sum, row) => {\n            return sum + (row.qty || 0);\n        }, 0);\n        \n        frm.set_value('total_bunches', totalBunches);\n        \n        // Find matching rows in OPL for the scanned variety and UOM\n        const matchingOPLRows = orderPickList.locations.filter(row => \n            row.item_code === stockEntryVariety && row.uom === stockEntryUOM\n        );\n        \n        if (matchingOPLRows.length === 0) {\n            frappe.throw(`No matching variety ${stockEntryVariety} with UOM ${stockEntryUOM} found in Order Pick List`);\n            return { totalItems: 0, scannedItems: 0, valid: false };\n        }\n        \n        // Initialize box_id with null to ensure we explicitly set it\n        let box_id = null;\n        \n        if (!existingFPL.length) {\n            // If no existing FPL, use the first matching OPL row's box_id\n            box_id = matchingOPLRows[0].custom_box_id;\n            box_label = matchingOPLRows[0].custom_box_label\n        } else {\n            // Get the FPL document\n            const fplDoc = await frappe.db.get_doc(\"Farm Pack List\", existingFPL[0].name);\n            const fplTable = fplDoc.pack_list_item || [];\n            \n            // Track scanned bunches for each box of this variety+UOM\n            const boxScannedCounts = {};\n            \n            // Count bunches already scanned for each box\n            fplTable.forEach(fplRow => {\n                if (fplRow.item_code === stockEntryVariety && fplRow.bunch_uom === stockEntryUOM && fplRow.custom_opl_id == oplName) {\n                    const boxKey = fplRow.box_id.toString();\n                    boxScannedCounts[boxKey] = (boxScannedCounts[boxKey] || 0) + fplRow.bunch_qty;\n                }\n            });\n            \n            // Find the first box that isn't full\n            for (const oplRow of matchingOPLRows) {\n                const boxKey = oplRow.custom_box_id.toString();\n                const scannedForBox = boxScannedCounts[boxKey] || 0;\n                \n                // If this box has fewer scanned bunches than required\n                if (scannedForBox < oplRow.qty) {\n                    box_id = oplRow.custom_box_id;\n                    box_label = matchingOPLRows[0].custom_box_label\n                    break;\n                }\n            }\n            \n            // If all boxes are full or no box was found\n            if (box_id === null && matchingOPLRows.length > 0) {\n                frappe.msgprint(`All boxes for ${stockEntryVariety} with UOM ${stockEntryUOM} are full.`);\n                // Use the last box as fallback\n                box_id = matchingOPLRows[matchingOPLRows.length - 1].custom_box_id;\n            }\n            \n            // Calculate total scanned bunches\n            fplTable.forEach(row => {\n                scannedBunches += row.bunch_qty;\n            });\n            \n            // Check if all required bunches for this variety are already scanned\n            const requiredBunchesForVariety = matchingOPLRows.reduce((sum, row) => sum + (row.qty || 0), 0);\n            const scannedBunchesForVariety = fplTable\n                .filter(row => row.item_code === stockEntryVariety && row.bunch_uom === stockEntryUOM && row.custom_opl_id == oplName)\n                .reduce((sum, row) => sum + (row.bunch_qty || 0), 0);\n                \n            if (scannedBunchesForVariety >= requiredBunchesForVariety) {\n                frappe.msgprint(`Excess ${stockEntryVariety} scanned for this order`);\n                return { totalItems: totalBunches, scannedItems: scannedBunches, valid: false };\n            }\n        }\n        \n        // Verify the scanned variety matches an expected variety in OPL\n        for (let i = 0; i < orderPickList.locations.length; i++) {\n            let currVariety = orderPickList.locations[i].item_code;\n            let currUOM = orderPickList.locations[i].uom;\n            \n            if (currVariety === stockEntryVariety) {\n                orderPickVariety = currVariety;\n                \n                if (currUOM !== stockEntryUOM) {\n                    frappe.throw(`Scanned wrong bunch size ${currVariety}: Expected ${currUOM}, but scanned ${stockEntryUOM}`);\n                }\n            }\n        }\n        \n        // Make sure box_id is always set\n        if (box_id === null) {\n            frappe.throw(`Could not determine appropriate box ID for ${stockEntryVariety}`);\n            return { totalItems: totalBunches, scannedItems: scannedBunches, valid: false };\n        }\n        \n        // Set box_number to the determined box_id\n        box_number = box_id;\n        \n    } catch (error) {\n        frappe.throw(`Error processing data: ${error}`);\n    }\n    \n    return {\n        totalItems: totalBunches,\n        scannedItems: scannedBunches,\n        box_number: box_number,\n        box_label: box_label,\n        valid: orderPickVariety === stockEntryVariety\n    };\n}\n\n\n\nfunction toggle_scan_data_field(frm) {\n    if (frm.doc.farm && frm.doc.action) {\n        frm.set_df_property('scan_data', 'hidden', 0);\n        \n        setTimeout(() => {\n            frm.fields_dict.scan_data.$wrapper.find('input').focus();\n        }, 300);\n\n    } else {\n        frm.set_df_property('scan_data', 'hidden', 1);\n    }\n}\n\n\n\nasync function createStockEntry(scan_value, farm, action, audio) {\n    \n    \n\n    let variety;\n    let qty;\n    let grower;\n    let uom;\n    let harvester;\n    let greenhouse;\n    let block__bed_number;\n    let stockEntryDoc;\n    let buckt_id;\n    \n    // Use the stockEntryName to get the stock_entry_data field data needed for\n    // stock transfer\n    if (action == \"Receiving\") {\n        try {\n            const { bucket_id } = JSON.parse(scan_value);\n            \n            const stockEntries = await frappe.db.get_list('Stock Entry', {\n               filters: {\n                   'custom_bucket_id': bucket_id,\n                   'docstatus': 1\n               },\n               fields: ['name', 'custom_scanned', 'custom_greenhouse', 'custom_harvester', 'custom_block__bed_number', 'items']\n            });\n            \n            if (stockEntries.length === 0) {\n                frappe.throw(`No Stock Entry found for bucket_id: ${bucket_id}`);\n                return;\n            }\n            \n            stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntries[0].name);\n            \n            if (stockEntryDoc.custom_scanned ) {\n                frappe.throw(\"Bucket already scanned!\");\n                \n                return;\n            }\n            \n            const items = stockEntryDoc.items;\n            greenhouse = stockEntryDoc.custom_greenhouse;\n            harvester = stockEntryDoc.custom_harvester_payroll_number;\n            block__bed_number = stockEntryDoc.custom_block__bed_number;\n            buckt_id = bucket_id;\n            \n            if (Array.isArray(items) && items.length > 0) {\n                variety = items[0].item_code;\n                qty = items[0].qty;\n            }\n            \n            \n            frappe.msgprint(`Harvester: ${harvester}, Greenhouse: ${greenhouse}, Bay: ${block__bed_number}, No. of Stems: ${qty} `)\n           \n        } catch (error) {\n            if (error.includes(\"Bucket already scanned!\")) {\n                console.log(error);\n            }\n            frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n        }\n        \n        \n    }\n    \n    if (action === \"Packing\") {\n        const stockEntryName = scan_value;\n        \n        try {\n            stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntryName);\n\n        } catch (error) {\n            frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n        }\n        \n        const items = stockEntryDoc.items;\n        \n        items.forEach((item) => {\n            variety = item.item_code;\n            \n            // Flowers are packed per 1 bunch\n            qty = 1;\n            uom = item.uom;\n        });\n        \n\n    }\n    \n    if (action === 'Receiving Quarantined') {\n        try {\n            const { bucket_id } = JSON.parse(scan_value);\n            \n            const stockEntries = await frappe.db.get_list('Stock Entry', {\n               filters: {\n                   'custom_bucket_id': bucket_id,\n                   'docstatus': 1\n               },\n               fields: ['name', 'custom_scanned', 'custom_greenhouse', 'custom_harvester', 'custom_block__bed_number', 'items']\n            });\n            \n            if (stockEntries.length === 0) {\n                frappe.throw(`No Stock Entry found for bucket_id: ${bucket_id}`);\n                return;\n            }\n            \n            stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntries[0].name);\n            \n            if (stockEntryDoc.custom_scanned ) {\n                frappe.throw(\"Bucket already scanned!\");\n                return;\n            }\n            \n            const items = stockEntryDoc.items;\n        \n            greenhouse = stockEntryDoc.custom_greenhouse;\n            harvester = stockEntryDoc.custom_harvester;\n            block__bed_number = stockEntryDoc.custom_block__bed_number;\n            buckt_id = bucket_id;\n    \n            if (Array.isArray(items) && items.length > 0) {\n                variety = items[0].item_code;\n                qty = items[0].qty;\n            }\n            \n            frappe.msgprint(`Harvester: ${harvester}, Greenhouse: ${greenhouse}, Bay: ${block__bed_number}, No. of Stems: ${qty} `)\n            \n        } catch (error) {\n            if (error.includes(\"Bucket already scanned!\")) {\n                console.log(error);\n            }\n            \n            frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n        }\n        \n        \n    }\n    \n    const stock_entry_type_mapping = {\n        \"Receiving\": \"Receiving\",\n        \"Packing\": \"Packing\",\n        \"Receiving Quarantined\": \"Receiving Quarantined\",\n    };\n    \n    const stock_entry_type = stock_entry_type_mapping[action];\n    \n    // Change the mapping of the location to check the location doctype \n    const locationMapping = {\n        \"Burguret Receiving\": { source: `${greenhouse}`, target: \"Burguret Receiving Cold Store - TL\" },\n        \"Burguret Receiving Quarantined\": { source: `${greenhouse}`, target: \"Burguret Quarantine Store - TL\" },\n        \"Burguret Packing\": { source: \"Burguret Graded Sold - TL\", target: \"Delivery Truck - TL\" },\n\n        \"Turaco Receiving\": { source: `${greenhouse}`, target: \"Turaco Receiving Cold Store - TL\" },\n        \"Turaco Receiving Quarantined\": { source: `${greenhouse}`, target: \"Turaco Quarantine Store - TL\" },\n        \"Turaco Packing\": { source: \"Turaco Graded Sold - TL\", target: \"Delivery Truck - TL\" },\n\n        \"Pendekeza Receiving\": { source: `${greenhouse}`, target: \"Pendekeza Receiving Cold Store - TL\" },\n        \"Pendekeza Receiving Quarantined\": { source: `${greenhouse}`, target: \"Pendekeza Quarantine Store - TL\" },\n        \"Pendekeza Packing\": { source: \"Pendekeza Graded Sold - TL\", target: \"Delivery Truck - TL\" }\n    };\n    \n    const scanLocation = `${farm} ${action}`;\n    \n    const stockmvt = locationMapping[scanLocation];\n\n    if (!stockmvt) {\n        frappe.msgprint(`Invalid scan location: ${scanLocation}`);\n        return;\n    }\n    stock_entry_data = {\n        \"location data\": stockmvt,\n        \"variety\": variety,\n        \"quantity\": qty,\n        \"grower\": grower,\n        \"harvester\": harvester,\n        \"greenhouse\": greenhouse,\n        \"stock entry type\": stock_entry_type,\n        \"uom\": uom,\n        \"block__bed_number\": block__bed_number,\n        \"bucket_id\": buckt_id,\n    };\n    \n    \n\n    const created_stock_entry = await frappe.call({\n        method: \"upande_kaitet.server_scripts.create_stock_entry.create_stock_entry\",\n        args: {\n            stock_entry_data: JSON.stringify(stock_entry_data),\n        }\n    });\n    \n    if (!created_stock_entry.message || !created_stock_entry.message.includes(\"SE\")) {\n        frappe.throw(\"Stock Entry Failed\");\n    }\n\n    if ( created_stock_entry.message.includes(\"SE\") && (stock_entry_type == \"Receiving\" || stock_entry_type == \"Receiving Quarantined\") ) {\n        await frappe.call({\n            method: \"upande_kaitet.server_scripts.update_custom_scanned.update_custom_scanned\",\n            args: { \n                stock_entry_name: stockEntryDoc.name,\n                action: action,\n                oplName: null\n            }\n        });\n        \n        audio.play();\n    }\n\n    return created_stock_entry;\n\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-02-26 08:46:32.942181",
  "module": "Upande Kaitet",
  "name": "Close Box Button",
  "script": "frappe.ui.form.on('Scan', {\n\trefresh: function(frm) {\n        update_primary_action(frm);\n        toggle_order_pick_list(frm)\n    },\n\n    action: function(frm) {\n        update_primary_action(frm);\n        toggle_order_pick_list(frm)\n    },\n\n    farm: function(frm) {\n        update_primary_action(frm);\n    },\n    \n    opl_data: function(frm) {\n        update_primary_action(frm);\n    },\n    \n    scan_data: function(frm) {\n        update_primary_action(frm);\n    }\n});\n\n\nfunction toggle_order_pick_list(frm) {\n    frm.toggle_display('order_pick_list', frm.doc.action === 'Packing');\n    frm.toggle_display('status', frm.doc.action === 'Packing');\n}\n\n\nfunction update_primary_action(frm) {\n    // if (frm.doc.status === 'Paused') {\n    //     frm.page.set_secondary_action('Resume Scan', function() {\n    //         frm.save().then(() => {\n    //             update_primary_action(frm);\n    //         });\n    //     });\n    // }\n    \n    if (frm.doc.action === 'Packing') {\n        if (frm.doc.status === 'Paused') {\n            frm.page.set_primary_action('Close Box', function() {\n                frm.set_value('status', 'Closed');\n                saveDoc(frm); \n            });\n        } else if (frm.doc.__unsaved) {\n            frm.page.set_primary_action('Pause Box', function() {\n                frm.set_value('status', 'Paused');\n                frm.save().then(() => {\n                    update_primary_action(frm);\n                });\n            });\n        } else {\n            frm.page.set_primary_action('Pause Box', function() {\n                frm.set_value('status', 'Paused');\n                frm.save().then(() => {\n                    update_primary_action(frm);\n                });\n            });\n        }\n            \n    } else {\n        frm.page.set_primary_action(__('Save'), function() {\n            frm.save();\n        });\n    }\n}\n\nfunction saveDoc(frm) {\n    frappe.call({\n        method: \"frappe.client.submit\",\n        args: {\n            doc: frm.doc,\n        },\n        callback: function(response) {\n            frappe.msgprint(\"Box Closed!\");\n            frm.reload_doc();\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2025-03-13 02:53:00.320459",
  "module": "Upande Kaitet",
  "name": "Transfer Grading Stock",
  "script": "frappe.listview_settings['Stock Entry'] = {\r\n    onload: function(listview) {\r\n        listview.page.add_button('Transfer Graded Stock', () => {\r\n            // Get all stock entries from the list that were created in the last 24 hours\r\n            let selected_entries = listview.data.filter(entry => {\r\n                let entryDate = new Date(entry.creation);\r\n                let last24Hours = new Date();\r\n                last24Hours.setHours(last24Hours.getHours() - 24);\r\n\r\n                return (\r\n                    entry.docstatus === 1 &&\r\n                    entryDate >= last24Hours && \r\n                    [\"Grading\", \"Grading Without Receiving\"].includes(entry.stock_entry_type)\r\n                );\r\n            }).map(entry => entry.name);\r\n            \r\n            if (selected_entries.length === 0) {\r\n                frappe.msgprint(__('No recent graded stock entries found.'));\r\n                return;\r\n            }\r\n\r\n            // Call the API to process the stock transfer\r\n            frappe.call({\r\n                method: \"upande_kaitet.server_scripts.transfer_graded_stock.transfer_stock\",\r\n                args: { stock_entries: selected_entries },\r\n                freeze: true,\r\n                freeze_message: \"Processing stock transfer...\",\r\n                callback: function(response) {\r\n\r\n                    if (response.message) {\r\n                        frappe.msgprint(`Stock Transfers Created: ${response.message.transferred_entries.join(\", \")}`);\r\n                        listview.refresh();\r\n                    } else {\r\n                        frappe.msgprint(\"Failed to create stock transfers.\");\r\n                    }\r\n                }\r\n            });\r\n\r\n        }, 'Action');\r\n    }\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Harvest",
  "enabled": 1,
  "modified": "2025-03-13 01:51:12.116581",
  "module": "Upande Kaitet",
  "name": "New Form After Save",
  "script": "frappe.ui.form.on('Harvest', {\n    after_save: function(frm) {\n        frappe.show_alert({message: 'Saved successfully!', indicator: 'green'});\n        \n        // Refresh and open a new form\n        setTimeout(() => {\n            frappe.set_route('Form', frm.doctype, 'new');\n        }, 1000);\n        \n        setTimeout(() => {\n            window.location.reload();\n        }, 1000);\n        \n        \n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Label Print",
  "enabled": 1,
  "modified": "2025-03-19 15:37:52.775509",
  "module": "Upande Kaitet",
  "name": "Remove Read Only on Field",
  "script": "frappe.ui.form.on('Label Print', {\n\tvariety(frm) {\n\t    if (frm.doc.variety) {\n            frappe.db.get_value('Item', frm.doc.variety, 'sales_uom', (r) => {\n                if (r && r.sales_uom) {\n                    frm.set_value('bunch_size', r.sales_uom);\n                }\n            });\n        }\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Harvest",
  "enabled": 1,
  "modified": "2025-04-06 15:31:21.938927",
  "module": "Upande Kaitet",
  "name": "Ensure Bucket Is Scanned On Save",
  "script": "frappe.ui.form.on('Harvest', {\n\tbefore_save(frm) {\n\t    if (frm.doc.quantity > 70 ) {\n\t        frappe.throw('Quantity in bucket cannot be more than 70 stems.');\n\t    }\n\t\tif (!frm.doc.bucket_id) {\n\t\t    frappe.throw(\"Please Refresh and scan the bucket QR Code before saving!\");\n\t\t    \n\t\t    \n\t\t    setTimeout(() => {\n                frappe.set_route('Form', frm.doctype, 'new');\n            }, 4000);\n            \n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n\t\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Label Print",
  "enabled": 1,
  "modified": "2025-04-09 16:05:06.453915",
  "module": "Upande Kaitet",
  "name": "Grading Traceability Symbols",
  "script": "frappe.ui.form.on('Label Print', {\n\trefresh(frm) {\n\t    let creation_date = frappe.datetime.now_date();\n\t    let date_obj = new Date(creation_date);\n\t    let day_index = date_obj.getDay();\n\t    \n\t    const days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\t    const sign = [\"+\", \"#\", \"@\", \"*\", \"$\", \"%\", \"&\"];\n\t    \n\t    let day_of_week = days_of_week[day_index];\n\t    let day_sign = sign[day_index];\n\t    \n\t    \n\t    frm.set_value(\"day_code\", day_sign);\n\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bunch QR Code",
  "enabled": 1,
  "modified": "2025-04-08 16:08:27.672356",
  "module": null,
  "name": "Set List View Limit to 500(BUNCH)",
  "script": "frappe.listview_settings[\"Bunch QR Code\"] = {\n    refresh:  function(listview) {\n        listview.page_length = 1000;\n        listview.start = 0;\n        listview.refresh();\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bucket QR Code",
  "enabled": 1,
  "modified": "2025-04-08 16:08:11.873432",
  "module": "Upande Kaitet",
  "name": "Set List View Limit to 500(BUCKET)",
  "script": "frappe.listview_settings[\"Bucket QR Code\"] = {\n    refresh:  function(listview) {\n        listview.page_length = 1000;\n        listview.start = 0;\n        listview.refresh();\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Harvest",
  "enabled": 1,
  "modified": "2025-04-08 16:28:52.796806",
  "module": "Upande Kaitet",
  "name": "Restrict Bay to Alphabets",
  "script": "frappe.ui.form.on('Harvest', {\n    validate: function(frm) {\n        var field_value = frm.doc.bay;\n        if (field_value) {\n            // Convert to uppercase and set it back\n            field_value = field_value.toUpperCase();\n            frm.set_value('bay', field_value);\n            \n            // Check if it contains only alphabets and spaces\n            if (!/^[A-Z\\s]+$/.test(field_value)) {\n                frappe.msgprint(__('The field {0} can only contain alphabets.'), [frm.fields_dict.bay.label]);\n                frappe.validated = false; // Prevent saving the form\n            }\n        }\n    },\n    bay: function(frm) {\n        var field_value = frm.doc.bay;\n        if (field_value) {\n            // Convert to uppercase and remove non-alphabetic characters\n            var cleaned_value = field_value.toUpperCase().replace(/[^A-Z\\s]/g, '');\n            if (field_value !== cleaned_value) {\n                frm.set_value('bay', cleaned_value);\n                frappe.show_alert('Only uppercase alphabets are allowed in this field.');\n            }\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Consolidated Pack List",
  "enabled": 1,
  "modified": "2025-04-22 13:08:55.028711",
  "module": "Upande Kaitet",
  "name": "Autopopulate Sales Order ID in CPL",
  "script": "frappe.ui.form.on('Dispatch Form Item', {\n\titems_add(frm, cdt, cdn) {\n\t\tlet row = locals[cdt][cdn];\n\t\t\n\t\tif (frm.doc.custom_sales_order_id_cpl) {\n\t\t    row.sales_order_id = frm.doc.custom_sales_order_id_cpl;\n\t\t    row.customer_id = frm.doc.custom_customer;\n\t\t    \n\t\t    frm.refresh_field('items');\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bunch QR Code",
  "enabled": 1,
  "modified": "2025-04-12 10:40:41.407428",
  "module": "Upande Kaitet",
  "name": "Hide Filter Button 2",
  "script": "frappe.listview_settings[\"Bunch QR Code\"] = {\n    onload(listview) {\n        setTimeout(() => {\n            let filter_button = $(\".filter-section .filter-selector\");\n            \n            if (filter_button.length) {\n                \n                filter_button.hide();\n            }\n        }, 2000);\n        \n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bucket QR Code",
  "enabled": 1,
  "modified": "2025-04-12 10:46:58.901316",
  "module": "Upande Kaitet",
  "name": "Hide Filter Button (Bucket QR Code List) 2",
  "script": "frappe.listview_settings['Bucket QR Code'] = {\n    onload(listview) {\n        setTimeout(() => {\n            let filter_button = $('.filter-section .filter-selector');\n            \n            if (filter_button.length) {\n                filter_button.hide();\n            }\n        }, 500);\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Farm Pack List",
  "enabled": 1,
  "modified": "2025-04-16 15:23:34.287546",
  "module": "Upande Kaitet",
  "name": "Ensure Items are in SO Before Manually Adding (FPL)",
  "script": "frappe.ui.form.on('Dispatch Form Item', {\n\tasync item_code(frm, cdt, cdn) {\n\t\tlet row = locals[cdt][cdn];\n\t\tlet item = 0;\n\t\t\n\t\ttry {\n            const salesOrderDoc = await frappe.db.get_doc(\"Sales Order\", frm.doc.custom_sales_order);\n            const itemsList = salesOrderDoc.items;\n            \n            for(let i = 0; i < itemsList.length; i++) {\n                if(itemsList[i].item_code == row.item_code) {\n                    item = 1;\n                }\n            }\n            \n            if (item == 0) {\n                frappe.msgprint(`${row.item_code} not found in Sales Order`);\n                row.item_code = \"\";\n            }\n            \n\t\t} catch (e) {\n\t\t    frappe.throw(`Error comparing with Sales Order, ${e}`);\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Farm Pack List",
  "enabled": 1,
  "modified": "2025-04-24 20:34:51.980009",
  "module": "Upande Kaitet",
  "name": "Authorise Under Pack Button in FPL",
  "script": "frappe.ui.form.on('Farm Pack List', {\n    refresh: function(frm) {\n        // Check if document is in Draft state and is underpacked\n        if (frm.doc.workflow_state === 'Draft' && frm.doc.custom_completion_percentage < 100) {\n            // Add the \"Authorise Under Pack\" button\n            frm.add_custom_button(__('Authorise Under Pack'), function() {\n                // Check if Under Pack Reason is provided\n                if (!frm.doc.custom_under_pack_reason || frm.doc.custom_under_pack_reason.trim() === '') {\n                    frappe.throw(__('Please provide a reason for under packing before requesting authorization'));\n                    return;\n                }\n                // Call server method to request authorization\n                frappe.call({\n                    method: 'upande_kaitet.server_scripts.under_packing.request_under_pack_authorization',\n                    args: {\n                        'doc_name': frm.doc.name\n                    },\n                    callback: function(r) {\n                        if (r.message) {\n                            frappe.show_alert({\n                                message: __('Under Pack Authorization Requested Successfully'),\n                                indicator: 'green'\n                            }, 5);\n                            frm.reload_doc();\n                        }\n                    }\n                });\n            }).addClass('btn-primary');\n        }\n\n        // For Sales Manager - Show dropdown button if authorization is pending\n        if (frm.doc.workflow_state === 'Pending Order Review' && frm.doc.custom_completion_percentage < 100 && frappe.user.has_role('Sales Manager')) {\n            // Create a dropdown button \"Under Packed\"\n            frm.add_custom_button(__(''), function() {\n                // This is a placeholder function since we'll be using the dropdown functionality\n            }, __('Under Packed Button')).addClass('btn-primary');\n\n            // Add \"Approve Under Pack\" option to the dropdown\n            frm.add_custom_button(__('Approve Under Pack'), function() {\n                frappe.call({\n                    method: 'upande_kaitet.server_scripts.under_packing.approve_under_pack',\n                    args: {\n                        'doc_name': frm.doc.name\n                    },\n                    callback: function(r) {\n                        if (r.message) {\n                            frappe.show_alert({\n                                message: __('Under Pack Approved Successfully'),\n                                indicator: 'green'\n                            }, 5);\n                            frm.reload_doc();\n                        }\n                    }\n                });\n            }, __('Under Packed Button'));\n\n            // Add \"Reject Under Pack\" option to the dropdown\n            frm.add_custom_button(__('Reject Under Pack'), function() {\n                frappe.call({\n                    method: 'upande_kaitet.server_scripts.under_packing.reject_under_pack',\n                    args: {\n                        'doc_name': frm.doc.name\n                    },\n                    callback: function(r) {\n                        if (r.message) {\n                            frappe.show_alert({\n                                message: __('Under Pack Rejected'),\n                                indicator: 'red'\n                            }, 5);\n                            frm.reload_doc();\n                        }\n                    }\n                });\n            }, __('Under Packed Button'));\n        }\n    }\n});",
  "view": "Form"
 }
]