[
 {
  "allow_guest": 0,
  "api_method": "get_manufacturing_managers",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Hourly",
  "modified": "2025-06-30 19:20:02.917056",
  "module": "Upande Kaitet",
  "name": "Vehicle Location Update",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def execute():\n    try:\n        vehicles = frappe.get_all(\"Vehicle\", filters={\"imei\": [\"!=\", \"\"]}, fields=[\"name\", \"imei\"])\n\n        for v in vehicles:\n            # Log which vehicle we're checking\n            frappe.logger().info(f\"üîç Checking {v.name} (IMEI: {v.imei})\")\n\n            readings = frappe.get_all(\n                \"GPS Reading\",\n                filters={\n                    \"imei\": v.imei,\n                    \"latitude\": [\"not in\", [None, \"\", 0]],\n                    \"longitude\": [\"not in\", [None, \"\", 0]]\n                },\n                fields=[\"latitude\", \"longitude\", \"creation\"],\n                order_by=\"creation desc\",\n                limit=1\n            )\n\n            if readings:\n                lat = float(readings[0][\"latitude\"])\n                lon = float(readings[0][\"longitude\"])\n                ts = readings[0][\"creation\"]\n\n                frappe.db.set_value(\"Vehicle\", v.name, {\n                    \"latitude\": lat,\n                    \"longitude\": lon,\n                    \"timestamp\": ts\n                })\n\n                frappe.logger().info(f\"‚úÖ Updated {v.name}: lat={lat}, lon={lon}, ts={ts}\")\n            else:\n                frappe.logger().info(f\"‚õî No GPS data for {v.name} (IMEI: {v.imei})\")\n\n        frappe.db.commit()\n\n    except Exception:\n        frappe.log_error(frappe.get_traceback(), \"‚ùå Vehicle GPS update failed\")\n        raise\n",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "Hourly",
  "modified": "2025-06-30 19:20:02.917056",
  "module": "Upande Kaitet",
  "name": "Repack",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def execute():\n    try:\n        vehicles = frappe.get_all(\"Vehicle\", filters={\"imei\": [\"!=\", \"\"]}, fields=[\"name\", \"imei\"])\n\n        for v in vehicles:\n            # Log which vehicle we're checking\n            frappe.logger().info(f\"üîç Checking {v.name} (IMEI: {v.imei})\")\n\n            readings = frappe.get_all(\n                \"GPS Reading\",\n                filters={\n                    \"imei\": v.imei,\n                    \"latitude\": [\"not in\", [None, \"\", 0]],\n                    \"longitude\": [\"not in\", [None, \"\", 0]]\n                },\n                fields=[\"latitude\", \"longitude\", \"creation\"],\n                order_by=\"creation desc\",\n                limit=1\n            )\n\n            if readings:\n                lat = float(readings[0][\"latitude\"])\n                lon = float(readings[0][\"longitude\"])\n                ts = readings[0][\"creation\"]\n\n                frappe.db.set_value(\"Vehicle\", v.name, {\n                    \"latitude\": lat,\n                    \"longitude\": lon,\n                    \"timestamp\": ts\n                })\n\n                frappe.logger().info(f\"‚úÖ Updated {v.name}: lat={lat}, lon={lon}, ts={ts}\")\n            else:\n                frappe.logger().info(f\"‚õî No GPS data for {v.name} (IMEI: {v.imei})\")\n\n        frappe.db.commit()\n\n    except Exception:\n        frappe.log_error(frappe.get_traceback(), \"‚ùå Vehicle GPS update failed\")\n        raise\n",
  "script_type": "Scheduler Event"
 }
]