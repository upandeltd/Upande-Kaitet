[
 {
  "allow_guest": 0,
  "api_method": "start_trip_transfer",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-29 11:28:34.791786",
  "module": "Upande Kaitet",
  "name": "Start Trip Transfer",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "delivery_trip = frappe.form_dict.get('delivery_trip')\n    \nif not delivery_trip:\n    frappe.throw(\"Delivery Trip parameter is required\")\n\ntrip = frappe.get_doc('Delivery Trip', delivery_trip)\n\nif trip.start_time:\n    frappe.throw(\"Trip already started.\")\n\nfrappe.db.set_value(\"Delivery Trip\", delivery_trip, {\n    \"departure_time\": frappe.utils.now_datetime(),\n    \"status\": \"In Transit\"\n})\nfrappe.db.commit()\n\ntrip.reload()\n\nfor stop in trip.delivery_stops:\n    dn = frappe.get_doc(\"Delivery Note\", stop.delivery_note)\n    for item in dn.items:\n        stock_entry = frappe.new_doc(\"Stock Entry\")  # Only pass the Doctype name\n        stock_entry.stock_entry_type = \"Material Transfer\"\n        stock_entry.company = dn.company\n        stock_entry.custom_farm = dn.custom_farm\n        stock_entry.custom_business_unit = dn.custom_business_unit\n        \n        stock_entry.append(\"items\", {\n            \"item_code\": item.item_code,\n            \"qty\": item.qty,\n\n            # PLace this somewhere editable\n            # Can fetch it from delvery note in the client script and pass \n            # it here \n            \"s_warehouse\": \"Yogurt Coldroom - KR\",\n            \"t_warehouse\": \"Goods In Transit - KR\",\n            \n        })\n        \n        stock_entry.insert(ignore_permissions=True)\n        stock_entry.submit()",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "end_trip_transfer",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-29 11:28:28.648114",
  "module": "Upande Kaitet",
  "name": "End Trip Transfer",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "delivery_trip = frappe.form_dict.get('delivery_trip')\n\ntrip = frappe.get_doc('Delivery Trip', delivery_trip)\n\nif trip.status != \"In Transit\":\n    frappe.throw(\"Trip must be In Transit to end\")\n\nif trip.end_time:\n    frappe.throw(\"Trip already completed\")\n    \nfrappe.db.set_value(\"Delivery Trip\", delivery_trip, {\n    \"custom_arrival_time\": frappe.utils.now_datetime(),\n    \"status\": \"Delivered\"\n})\nfrappe.db.commit()\n\ntrip.reload()\n\n# Get all delivery notes in this trip and add their items\nfor stop in trip.delivery_stops:\n    dn = frappe.get_doc(\"Delivery Note\", stop.delivery_note)\n    \n    for item in dn.items:\n        stock_entry = frappe.new_doc(\"Stock Entry\")\n        stock_entry.stock_entry_type = \"Material Transfer\"\n        stock_entry.company = dn.company\n        stock_entry.custom_farm = dn.custom_farm\n        stock_entry.custom_business_unit = dn.custom_business_unit\n        \n        stock_entry.append(\"items\", {\n            \"item_code\": item.item_code,\n            \"qty\": item.qty,\n            \n            # Make it easily editable\n            # Pass from client script\n            \"s_warehouse\": \"Goods In Transit - KR\",\n            \"t_warehouse\": \"Yoghurt Karen Store - KR\"\n        })\n\nstock_entry.insert()\nstock_entry.submit()\n\n# return \"Trip completed and yoghurt moved to Karen Yoghurt Store\"",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "add_gps_reading",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-29 10:50:33.911825",
  "module": "Fleet Management",
  "name": "Gps",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "try:\n    data = frappe.request.get_json()\n    longitude = data.get(\"longitude\")\n    latitude = data.get(\"latitude\")\n    timestamp = data.get(\"timestamp\")\n    imei = data.get(\"imei\", \"\")\n    date = data.get(\"date\", None)\n\n    frappe.log_error(f\"Starting to create new GPS Reading record with lat: {latitude}, long: {longitude}\")\n\n    # Validate coordinates\n    if not longitude or not latitude:\n        frappe.throw(\"Both longitude and latitude are required\")\n\n    # Create the GPS Reading document\n    gps_reading = frappe.get_doc({\n        \"doctype\": \"GPS Readings\",\n        \"geolocation_zwck\": f\"{latitude},{longitude}\",  # Critical: No space after comma\n        \"table_dgzd\": [{\n            \"longitude\": longitude,\n            \"latitude\": latitude,\n            \"timestamp\": timestamp,\n            \"imei\": imei,\n            \"date\": date\n        }]\n    })\n\n    gps_reading.insert()\n\n    frappe.log_error(f\"Successfully created GPS Reading: {gps_reading.name}\")\n\n    frappe.response[\"message\"] = {\n        \"status\": \"success\",\n        \"message\": \"GPS Reading created successfully\",\n        \"docname\": gps_reading.name,\n        \"location\": f\"{latitude},{longitude}\"\n    }\n\nexcept Exception as e:\n    frappe.log_error(f\"GPS Reading creation failed: {str(e)}\")\n    frappe.response[\"message\"] = {\n        \"status\": \"error\",\n        \"message\": f\"Failed to create GPS Reading: {str(e)}\"\n    }",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-29 11:28:05.492132",
  "module": "Upande Kaitet",
  "name": "Create delivery trip",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "if doc.workflow_state == \"In Transit\":\n    \n    # Create Delivery Trip and start trip\n    delivery_trip = frappe.new_doc(\"Delivery Trip\")\n    \n    delivery_trip.company = doc.company\n    delivery_trip.custom_farm = doc.custom_farm\n    delivery_trip.custom_business_unit = doc.custom_business_unit\n    delivery_trip.driver = doc.custom_departing_driver\n    delivery_trip.driver_name = doc.custom_departing_driver_name\n    delivery_trip.vehicle = doc.custom_departing_vehicle\n    delivery_trip.departure_time = doc.custom_departing_time\n\n    customer_doc = frappe.get_doc(\"Customer\", doc.customer)\n    customer_address = customer_doc.customer_primary_address\n    \n    delivery_trip.append(\"delivery_stops\", {\n        \"customer\": doc.customer,\n        \"address\": customer_address,\n        \"delivery_note\": doc.name\n    })\n\n    for stop in delivery_trip.delivery_stops:\n        dn = frappe.get_doc(\"Delivery Note\", stop.delivery_note)\n        for item in dn.items:\n            stock_entry = frappe.new_doc(\"Stock Entry\")  # Only pass the Doctype name\n            stock_entry.stock_entry_type = \"Material Transfer\"\n            stock_entry.company = dn.company\n            stock_entry.custom_farm = dn.custom_farm\n            stock_entry.custom_business_unit = dn.custom_business_unit\n            \n            stock_entry.append(\"items\", {\n                \"item_code\": item.item_code,\n                \"qty\": item.qty,\n    \n                # PLace this somewhere editable\n                # Can fetch it from delvery note in the client script and pass \n                # it here \n                \"s_warehouse\": \"Yogurt Coldroom - KR\",\n                \"t_warehouse\": \"Goods In Transit - KR\",\n                \n            })\n            \n            stock_entry.insert(ignore_permissions=True)\n            stock_entry.submit()\n    \n    delivery_trip.insert()\n    delivery_trip.submit()\n    \n    delivery_trip.db_set(\"status\", \"In Transit\")\n    delivery_trip.reload()\n    \nif doc.workflow_state == \"Arrived\":\n    # End trip and update arrival time\n    delivery_trip_name = frappe.db.get_value(\"Delivery Stop\", \n        {\"delivery_note\": doc.name}, \"parent\")\n        \n    if delivery_trip_name:\n        delivery_trip = frappe.get_doc(\"Delivery Trip\", delivery_trip_name)\n        delivery_trip.custom_arrival_time = frappe.utils.now_datetime()\n        \n        # End trip and update arrival time\n        for stop in delivery_trip.delivery_stops:\n            dn = frappe.get_doc(\"Delivery Note\", stop.delivery_note)\n            \n            for item in dn.items:\n                stock_entry = frappe.new_doc(\"Stock Entry\")\n                stock_entry.stock_entry_type = \"Material Transfer\"\n                stock_entry.company = dn.company\n                stock_entry.custom_farm = dn.custom_farm\n                stock_entry.custom_business_unit = dn.custom_business_unit\n                \n                stock_entry.append(\"items\", {\n                    \"item_code\": item.item_code,\n                    \"qty\": item.qty,\n                    \n                    # Fetch from delivery note\n                    \"s_warehouse\": \"Goods In Transit - KR\",\n                    \"t_warehouse\": \"Yoghurt Store Karen - KR\"\n                })\n                \n                stock_entry.insert(ignore_permissions=True)\n                stock_entry.submit()\n        \n        # Update delivery trip status\n        delivery_trip.db_set(\"status\", \"Completed\")\n        delivery_trip.reload()\n    else:\n        frappe.throw(\"No delivery trip found for this delivery note\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-03 00:49:20.671888",
  "module": "Upande Kaitet",
  "name": "Material Issue Notification",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Material Request",
  "script": "# Proceed only if the Material Request is of type Issue\nif doc.material_request_type == \"Material Issue\":\n\n    # Check if any item in the Material Request is Milk\n    milk_found = any(\"milk\" in (item.item_code or \"\").lower() for item in doc.items)\n\n    if milk_found:\n        # Get all users with the role \"HOD Dairy\"\n        users = frappe.db.sql(\"\"\"\n            SELECT DISTINCT `tabUser`.name\n            FROM `tabUser`\n            JOIN `tabHas Role` ON `tabHas Role`.parent = `tabUser`.name\n            WHERE `tabHas Role`.role = %s AND `tabUser`.enabled = 1\n        \"\"\", (\"HOD Dairy\",), as_dict=True)\n\n        # Create a notification for each user\n        for user in users:\n            frappe.get_doc({\n                \"doctype\": \"Notification Log\",\n                \"subject\": \"Milk Material Request Submitted\",\n                \"email_content\": f\"A Material Request for Milk has been submitted: <a href='/app/material-request/{doc.name}'>{doc.name}</a>\",\n                \"document_type\": \"Material Request\",\n                \"document_name\": doc.name,\n                \"for_user\": user.name,\n                \"type\": \"Alert\"\n            }).insert(ignore_permissions=True)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-03 09:21:35.065278",
  "module": "Upande Kaitet",
  "name": "Work Order, Event; on_submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Work Order",
  "script": "# Trigger on Work Order submit\nif not doc.custom_weighed_amount:\n    frappe.throw(\"Please enter the Weighed Amount before submitting.\")\n\n# Fetch the final stock entry linked to this Work Order\nstock_entry = frappe.get_all(\n    \"Stock Entry\",\n    filters={\"work_order\": doc.name, \"purpose\": \"Manufacture\"},\n    fields=[\"name\"]\n)\n\nif stock_entry:\n    se = frappe.get_doc(\"Stock Entry\", stock_entry[0][\"name\"])\n\n    for item in se.items:\n        if item.is_finished_item:\n            weighed_qty = doc.custom_weighed_amount\n\n            # Convert if needed\n            if item.stock_uom != doc.fg_uom:\n                conversion_factor = frappe.get_value(\"UOM Conversion Detail\", {\n                    \"parent\": item.item_code,\n                    \"uom\": doc.fg_uom\n                }, \"conversion_factor\")\n\n                if not conversion_factor:\n                    frappe.throw(f\"No UOM conversion defined from {doc.fg_uom} to {item.stock_uom} for item {item.item_code}\")\n\n                weighed_qty = weighed_qty * conversion_factor\n\n            item.qty = weighed_qty\n            item.transfer_qty = weighed_qty\n\n    se.save()\n    frappe.msgprint(f\"Updated Stock Entry {se.name} with weighed quantity.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_manufacturing_managers",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-03 13:36:36.377565",
  "module": "Upande Kaitet",
  "name": "Filtering based on Role",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def get_manufacturing_managers():\n    user_ids = frappe.get_all(\"Has Role\", filters={\"role\": \"Manufacturing Manager\"}, pluck=\"parent\")\n    \n    if not user_ids:\n        return []\n\n    return frappe.get_all(\n        \"Employee\",\n        filters={\n            \"user_id\": [\"in\", user_ids],\n            \"status\": \"Active\"\n        },\n        pluck=\"name\"\n    )\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "request_concession",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-03 14:22:39.192177",
  "module": "Upande Kaitet",
  "name": "Request Concession",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def request_concession(quality_inspection_name):\n    try:\n        # Log the initial step\n        frappe.logger().info(f\"Requesting concession for {quality_inspection_name}\")\n        \n        # Update the Quality Inspection document\n        result = frappe.db.set_value(\"Quality Inspection\", quality_inspection_name, {\n            \"status\": \"Accepted\",\n            \"concession_requested\": 1\n        })\n\n        # Log the result of the update\n        frappe.logger().info(f\"Update result: {result}\")\n        \n        frappe.msgprint(f\"Concession requested successfully for {quality_inspection_name}. Status updated to Accepted.\")\n        return {\"success\": True, \"message\": f\"Updated {quality_inspection_name}\"}\n    except Exception as e:\n        frappe.log_error(message=str(e), title=\"Concession Request Error\")\n        return {\"success\": False, \"message\": f\"Error: {str(e)}\"}\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-03 10:32:58.801393",
  "module": "Upande Kaitet",
  "name": "FPL Block New Version",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "# Server Script: Farm Pack List Validation\n# DocType: Farm Pack List\n# Event: Before Save\n# Script Type: Server\n\n# Calculate completion percentage\npacked_stems = int(doc.custom_total_stems or 0)\nrequired_stems = int(doc.custom_picked_total_stems or 0)\ncompletion_percentage = 0\n\nif required_stems > 0:\n    completion_percentage = (packed_stems / required_stems) * 100\n    doc.custom_completion_percentage = completion_percentage\n\n# Validate when moving from Draft to Pending Order Review\nif doc.workflow_state == \"Pending Order Review\" and doc.get_doc_before_save().workflow_state == \"Draft\":\n    if completion_percentage < 100:\n        # Check if this was initiated via the Authorize Under Pack button\n        # We'll identify this by the presence of the under_pack_reason\n        if not doc.custom_under_pack_reason:\n            message = f\"\"\"\n                <b>This Farm Pack List cannot be sent for review before all ordered stems are packed.</b><br><br>\n                Packed Stems: <b>{packed_stems}</b><br>\n                Required Stems (from Order Pick List): <b>{required_stems}</b><br>\n                Packing Completion: <b>{round(completion_percentage, 2)}%</b><br><br>\n                If you cannot complete this packing, please add an Under Pack Reason and use the \"Authorise Under Pack\" button.\n                \"\"\"\n            frappe.throw(message)\n    elif completion_percentage > 100:\n        frappe.throw(\"You have over packed!\")\n\n# Validate when moving from Pending Order Review to Reviewed\nelif doc.workflow_state == \"Reviewed\" and doc.get_doc_before_save().workflow_state == \"Pending Order Review\":\n    if completion_percentage < 100:\n        # Check if this has been approved via our custom function\n        comments = frappe.get_all(\"Comment\", \n            filters={\n                \"reference_doctype\": \"Farm Pack List\",\n                \"reference_name\": doc.name,\n                \"content\": [\"like\", \"%Under Pack approved by%\"]\n            },\n            fields=[\"name\"]\n        )\n        \n        # If no approval comments exist, block the action\n        if not comments:\n            message = f\"\"\"\n                <b>You cannot approve this under-packed Farm Pack List without proper authorization.</b><br><br>\n                Packed Stems: <b>{packed_stems}</b><br>\n                Required Stems (from Order Pick List): <b>{required_stems}</b><br>\n                Completion: <b>{round(completion_percentage, 2)}%</b><br><br>\n                This document requires approval using the \"Approve Under Pack\" button by a Sales Manager.\n                \"\"\"\n            frappe.throw(message)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-11 10:54:18.828871",
  "module": "Upande Kaitet",
  "name": "Stock Entry Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Harvesting\") or (doc.stock_entry_type == \"Receiving\") or (doc.stock_entry_type == \"Grading\"):\n    doc.submit()\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-02-14 01:15:16.702691",
  "module": "Upande Kaitet",
  "name": "Stock Entry After Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\":\n    name = doc.name\n    \n    if frappe.db.exists(\"QR Code\", name):\n        frappe.delete_doc(\"QR Code\", name)\n    \n    if doc.custom_bunch_qr_code:\n        qr_code_doc = frappe.get_doc({\n            \"doctype\": \"QR Code\",  \n            \"stock_entry\": doc.name,\n            \"qr_code_image\": doc.custom_bunch_qr_code,  \n        })\n        qr_code_doc.insert()\n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-24 12:22:22.737541",
  "module": "Upande Kaitet",
  "name": "Harvest Stock Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Harvest",
  "script": "stock_entry = frappe.new_doc(\"Stock Entry\")\n\nstock_entry.stock_entry_type = \"Harvesting\"\nstock_entry.custom_farm = doc.farm\nstock_entry.custom_greenhouse = doc.block or doc.blck or doc.bck\nstock_entry.custom_block__bed_number = doc.bay\nstock_entry.custom_harvester = doc.harvester\nstock_entry.custom_bucket_id = doc.bucket_id\nstock_entry.to_warehouse = doc.block or doc.blck or doc.bck\n\nstock_entry.append(\"items\", {\n    \n    \"item_code\": doc.item_code,\n    \"qty\": doc.quantity\n})\n\nstock_entry.insert()\nstock_entry.submit()\n\nfrappe.msgprint(f\"Stock Entry {stock_entry.name} created successfully.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-08 17:27:53.094553",
  "module": "Upande Kaitet",
  "name": "Automate Rejects Material Issue",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Field Rejects\"):\n    farm = doc.custom_farm\n    items = []\n    for item in doc.items:\n        item_dict = {\n            \"item_code\": item.item_code,\n            \"qty\": item.qty,\n            \"s_warehouse\": None,\n            \"t_warehouse\": item.t_warehouse,\n            \"custom_rejection_reason\": item.custom_rejection_reason,\n            \"custom_bay\": item.custom_bay\n        }\n        \n        items.append(item_dict)\n        \n    \n    if items:\n        material_issue = frappe.get_doc({\n            \"doctype\": \"Stock Entry\",\n            \"stock_entry_type\": \"Field Rejects Material Issue\",\n            \"custom_farm\": farm,\n            \"items\": []\n        })\n\n        for item in items:\n            material_issue.append(\"items\", {\n                \"item_code\": item[\"item_code\"],\n                \"qty\": item[\"qty\"],\n                \"s_warehouse\": item[\"t_warehouse\"],\n                \"t_warehouse\": None,\n                \"custom_rejection_reason\": item[\"custom_rejection_reason\"],\n                \"custom_bay\": item[\"custom_bay\"]\n            })\n\n        material_issue.insert()\n        \n        material_issue.set_posting_time = 1 \n        material_issue.posting_date = doc.posting_date\n        material_issue.posting_time = doc.posting_time\n        \n        material_issue.submit()\n        \n        # Save the name of the document of material issue in the Stock Entry Doc\n        \n        frappe.msgprint(f\"Field Rejects Material Issue {material_issue.name} created successfully.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-08 16:46:20.644668",
  "module": "Upande Kaitet",
  "name": "Create Box Labels",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "if doc.workflow_state == \"Pending Order Review\" and doc.get_doc_before_save().workflow_state == \"Draft\":\n\n    pack_list_items = doc.pack_list_item\n    sales_order_id = doc.custom_sales_order\n    \n    # Get the farm from the item table of the fpl\n    farm_warehouse = pack_list_items[0].source_warehouse\n    farm = farm_warehouse.split()[0]\n    \n    opl = frappe.db.sql(\"\"\"\n        SELECT p.name \n        FROM `tabOrder Pick List` p\n        JOIN `tabPick List Item` i ON i.parent = p.name\n        WHERE p.sales_order = %s\n        AND i.warehouse = %s\n        AND i.idx = 1\n        LIMIT 1\n    \"\"\", (sales_order_id, f'{farm} Available for Sale - TL'), as_dict=1)\n        \n    \n    sales_order_doc = frappe.get_doc(\n            \"Sales Order\", sales_order_id\n        )\n        \n        \n    if opl:\n        opl_doc = frappe.get_doc(\"Order Pick List\", opl[0].name)\n        \n        \n        \n        for item in pack_list_items:\n            # Check if a box label doc matching the opl used exists,\n            existing_labels = frappe.get_list(\n                    \"Box Label\",\n                    filters = {\n                        \"order_pick_list\": opl_doc.name\n                    }\n                )\n                \n    \n            \n            if not existing_labels:\n                total_stems = 0\n                box_1_items = []    \n                \n                for row in pack_list_items:\n                    if row.box_id == \"1\":\n                        box_1_items.append({\n                            \"item_code\": row.item_code,\n                            \"bunch_uom\": row.bunch_uom,\n                            \"bunch_qty\": row.bunch_qty\n                        })\n                        total_stems = total_stems + row.custom_number_of_stems\n                \n                \n                new_label = frappe.new_doc(\"Box Label\")\n                \n                new_label.customer = doc.custom_customer\n                new_label.box_number = 1\n                new_label.order_pick_list = opl_doc.name\n                new_label.pack_rate = total_stems\n                new_label.date = opl_doc.date_created\n                new_label.customer_purchase_order = sales_order_doc.po_no\n                new_label.consignee = sales_order_doc.custom_consignee\n                new_label.truck_details =  sales_order_doc.custom_truck_details\n                new_label.farm_pack_list_link = doc.name\n                new_label.length = pack_list_items[0].stem_length\n                \n                for fpl_item in box_1_items:\n                    new_label.append(\"box_item\", {\n                        \"variety\": fpl_item[\"item_code\"],\n                        \"uom\": fpl_item[\"bunch_uom\"],\n                        \"qty\": fpl_item[\"bunch_qty\"]\n                    })\n                \n                \n                new_label.insert()\n                \n            \n            if existing_labels:\n                # Check the number of box labels existing\n                # Create the next box label (box number = number of existing box labels + 1 )\n                # Filter that box number items in the fpl just like the box_1_items\n                # Next add the details just like box_1 was added.\n                # If there is no next box label, stop\n                existing_box_count = len(existing_labels)\n                box_number = existing_box_count + 1\n                \n                total_stems = 0\n                box_items = []\n                \n                for row in pack_list_items:\n                    if row.box_id == f\"{box_number}\":\n                        box_items.append({\n                            \"item_code\": row.item_code,\n                            \"bunch_uom\": row.bunch_uom,\n                            \"bunch_qty\": row.bunch_qty\n                        })\n                        total_stems = total_stems + row.custom_number_of_stems\n                \n            \n                if len(box_items) > 0:\n    \n                    new_label = frappe.new_doc(\"Box Label\")\n            \n                    new_label.customer = doc.custom_customer\n                    new_label.box_number = box_number\n                    new_label.order_pick_list = opl_doc.name\n                    new_label.pack_rate = total_stems\n                    new_label.date = opl_doc.date_created\n                    new_label.customer_purchase_order = sales_order_doc.po_no\n                    new_label.consignee = sales_order_doc.custom_consignee\n                    new_label.truck_details = sales_order_doc.custom_truck_details\n                    new_label.farm_pack_list_link = doc.name\n                    new_label.length = pack_list_items[0].stem_length\n                \n                    for fpl_item in box_items:\n                        new_label.append(\"box_item\", {\n                            \"variety\": fpl_item[\"item_code\"],\n                            \"uom\": fpl_item[\"bunch_uom\"],\n                            \"qty\": fpl_item[\"bunch_qty\"]\n                        })\n                        \n                    # Save the new box label\n                    new_label.insert()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-13 12:54:38.914101",
  "module": "Upande Kaitet",
  "name": "Update Grading Forecast Tracker",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading Forecast\":\n    farm = doc.custom_farm\n    new_tracker_doc = None\n    varieties_in_stock_entry = []\n    \n    for item in doc.items:\n        if item.t_warehouse:\n            varieties_in_stock_entry.append({\n                \"item_code\": item.item_code,\n                \"qty\": item.qty\n            })\n            \n\n    tracker_list = frappe.get_list(\"Grading Forecast Tracker\", fields='name',\n        filters= {\n            'farm': farm\n        })\n\n    if len(tracker_list) < 1:\n        new_tracker_doc = frappe.new_doc(\"Grading Forecast Tracker\")\n        \n        new_tracker_doc.farm = farm\n        new_tracker_doc.insert()\n        \n        for item in varieties_in_stock_entry:\n            item_found = False\n    \n            for tracker_item in new_tracker_doc.items:\n                if tracker_item.variety == item[\"item_code\"]:\n                    tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + item[\"qty\"]\n                    item_found = True\n                    break\n    \n            if not item_found:\n                new_tracker_doc.append(\"items\", {\n                    \"variety\": item[\"item_code\"],\n                    \"qty_deficit_in_forecast\": item[\"qty\"]\n                })\n        \n        new_tracker_doc.save()\n\n    if len(tracker_list) > 0:\n        existing_tracker = frappe.get_doc(\"Grading Forecast Tracker\", farm)\n        \n        for item in varieties_in_stock_entry:\n            item_found = False\n\n            for tracker_item in existing_tracker.items:\n                if tracker_item.variety == item[\"item_code\"]:\n                    tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + item[\"qty\"]\n                    item_found = True\n                    break\n\n            if not item_found:\n                new_item_row = existing_tracker.append(\"items\", {\n                    \"variety\": item[\"item_code\"],\n                    \"qty_deficit_in_forecast\": item[\"qty\"]\n                })\n        \n        # After updating items, save the existing tracker\n        existing_tracker.save()\n        \n\n    \n\n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-11 12:14:56.911903",
  "module": "Upande Kaitet",
  "name": "Update Sales Order ID on Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consolidated Pack List",
  "script": "if doc.items:\n    for item in doc.items:\n        if item.sales_order_id:\n            doc.custom_sales_order_id_cpl = item.sales_order_id\n            break\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-18 13:37:49.553104",
  "module": "Upande Kaitet",
  "name": "Update Forecast Tracker (During Grading)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\":\n    # Remove the variety and quantity to go and pay for the debt in forecast while\n    variety_in_stock_entry = []\n    farm = doc.custom_farm\n    \n    abbr_obj = {\n        \"Burguret\": \"BUR\",\n        \"Pendekeza\": \"PNDK\",\n        \"Turaco\": \"TUR\",\n    }\n    \n    for item in doc.items:\n        variety_in_stock_entry.append({\n            \"item_code\": item.item_code,\n            \"qty\": item.transfer_qty\n        })\n\n    existing_tracker = frappe.get_doc(\"Grading Forecast Tracker\", farm)\n    items_to_transfer = []\n    \n    for item in variety_in_stock_entry:\n        item_found = False\n\n        # Loop through existing tracker items to find a match by item_code\n        for tracker_item in existing_tracker.items:\n            if tracker_item.variety == item[\"item_code\"]:\n                # Check the balance(qty) in the tracker and pay that, maximum of the qty of stems graded in the stock entry\n                item_found = True\n                if tracker_item.qty_deficit_in_forecast != 0:\n                    deficit = abs(tracker_item.qty_deficit_in_forecast)\n                    transferable_qty = min(item[\"qty\"], deficit)\n        \n                    # Adjust the deficit in the tracker (always move toward zero)\n                    if tracker_item.qty_deficit_in_forecast > 0:\n                        tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast - transferable_qty\n                    else:\n                        tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + transferable_qty\n        \n                    # Append the item to the transfer list\n                    items_to_transfer.append({\n                        \"source_item\": tracker_item.variety,\n                        \"target_item\": f\"{abbr_obj.get(farm)} Forecast Item\",\n                        \"qty\": transferable_qty\n                    })\n\n                break\n            \n\n        # If item_code wasn't found, create a new row in the tracker item table\n        if not item_found:\n            break\n        \n        # After updating items, save the existing tracker\n        existing_tracker.save()\n        \n    if len(items_to_transfer) > 0:\n        # Perform a stock entry called type Forecast Repayment that is repack of variety from {farm} Available for Sale to\n        # {farm} Grading Forecast - TL as variety {farm} Grading Forecast\n        stock_entry = frappe.new_doc(\"Stock Entry\")\n        stock_entry.stock_entry_type = \"Forecast Repayment\"\n        \n        for transfer_item in items_to_transfer:\n            stock_entry.append(\"items\", {\n                \"item_code\": transfer_item[\"source_item\"],  # Source: actual variety\n                \"qty\": transfer_item[\"qty\"],\n                \"s_warehouse\": f\"{farm} Available for Sale - TL\"\n            })\n            stock_entry.append(\"items\", {\n                \"item_code\": transfer_item[\"target_item\"],  # Target: Graded Forecast item\n                \"qty\": transfer_item[\"qty\"],\n                \"t_warehouse\": f\"{abbr_obj.get(farm)} Grading Forecast - TL\"\n            })\n        \n        stock_entry.insert()\n        stock_entry.submit()\n        \n        doc.db_set(\"custom_fc_repayment_doc\", stock_entry.name)\n\n        \n        \n        \n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-15 17:20:36.027540",
  "module": "Upande Kaitet",
  "name": "Update Tracker (During Grading Cancel)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\" and doc.custom_fc_repayment_doc:\n    farm = doc.custom_farm\n    varieties_to_update = []\n    \n    try:\n        repayment_entry = frappe.get_doc(\"Stock Entry\", doc.custom_fc_repayment_doc)\n        tracker_doc = frappe.get_doc(\"Grading Forecast Tracker\", farm)\n        \n        for item in repayment_entry.items:\n            if item.s_warehouse:\n                varieties_to_update.append({\n                    \"item_code\": item.item_code,\n                    \"qty\": item.qty\n                })\n                \n        for update_item in varieties_to_update:\n            for tracker_item in tracker_doc.items:\n                if tracker_item.variety == update_item[\"item_code\"]:\n                    tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + update_item[\"qty\"]\n                    break\n        \n        \n        tracker_doc.save()\n        \n        doc.custom_fc_repayment_doc = None\n\n        if repayment_entry.docstatus == 1:\n            repayment_entry.cancel()\n\n        frappe.msgprint(f\"Linked Forecast Repayment entry {repayment_entry.name} was cancelled.\")\n\n    except Exception as e:\n        frappe.throw(f\"Error Updating Forecast Repayment: {e}\")\n        \n\n# if doc.stock_entry_type == \"Forecast Repayment\":\n#     wh = doc.items[0].s_warehouse or doc.items[0].t_warehouse\n#     farm = wh.split()[0]\n#     varieties_to_update = []\n    \n#     tracker_doc = frappe.get_doc(\"Grading Forecast Tracker\", farm)\n    \n#     for item in doc.items:\n#         if item.s_warehouse:\n#             varieties_to_update.append({\n#                 \"item_code\": item.item_code,\n#                 \"qty\": item.qty\n#             })\n            \n#     for update_item in varieties_to_update:\n#         for tracker_item in tracker_doc.items:\n#             if tracker_item.variety == update_item[\"item_code\"]:\n#                 tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + update_item[\"qty\"]\n#                 break\n    \n    \n#     tracker_doc.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-16 21:56:33.245432",
  "module": "Upande Kaitet",
  "name": "Forecast Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Forecast Entry",
  "script": "grading_forecast_doc = frappe.new_doc(\"Stock Entry\")\ngrading_forecast_doc.stock_entry_type = \"Grading Forecast\"\ngrading_forecast_doc.custom_farm = doc.farm\ngrading_forecast_doc.custom_forecast_entry = doc.name\n\nforecast_varieties = []\ntotal_qty = 0\n\nabbr_mapping = {\n    \"Burguret\": \"BUR\",\n    \"Pendekeza\": \"PNDK\",\n    \"Turaco\": \"TUR\"\n}\n\nfor item in doc.items:\n    total_qty = total_qty + item.qty_in_stems\n    \n    forecast_varieties.append({\n        \"variety\": item.item_code,\n        \"qty\": item.qty_in_stems,\n    })\n    \n    grading_forecast_doc.append(\"items\", {\n        \"item_code\": item.item_code,\n        \"qty\": item.qty_in_stems,\n        \"t_warehouse\": f\"{abbr_mapping.get(doc.farm)} Grading Forecast - TL\", \n        \"uom\": \"Stems\",\n    })\n    \ngrading_forecast_doc.append(\"items\", {\n    \"item_code\": f\"{abbr_mapping.get(doc.farm)} Forecast Item\",\n    \"qty\": total_qty,\n    \"s_warehouse\": f\"{abbr_mapping.get(doc.farm)} Grading Forecast - TL\", \n    \"uom\": \"Stems\",\n})\n\ngrading_forecast_doc.insert()\ngrading_forecast_doc.submit()\n    \n\n\n    \n\n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-13 13:12:02.392172",
  "module": "Upande Kaitet",
  "name": "Update Tracker (Grading Forecast)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading Forecast\":\n    reversed_items = []\n    tracker_doc = frappe.get_doc(\"Grading Forecast Tracker\", doc.custom_farm)\n\n    for item in doc.items:\n        if item.t_warehouse:\n            reversed_items.append({\n                \"item_code\": item.item_code,\n                \"qty\": item.qty\n            })\n            \n            \n    for item in tracker_doc.items:\n        for i in reversed_items:\n            if item.variety == i[\"item_code\"]:\n                item.qty_deficit_in_forecast = item.qty_deficit_in_forecast - i[\"qty\"]\n                break\n            \n    tracker_doc.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-17 00:09:59.723998",
  "module": "Upande Kaitet",
  "name": "Allow Packing Of Returned Bunches",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Order Pick List",
  "script": "stock_entries = frappe.get_all(\"Stock Entry\", filters={\"custom_opl_scanned\": doc.name}, fields=[\"name\"])\n\nfor entry in stock_entries:\n    se_doc = frappe.get_doc(\"Stock Entry\", entry.name)\n\n    if se_doc.docstatus == 1:\n        se_doc.db_set(\"custom_scanned_packing\", 0)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-24 15:11:30.790753",
  "module": "Upande Kaitet",
  "name": "Lock Dates On Submit of Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "if frappe.db.exists(\"Sales Invoice\", doc.name):\n    inv_doc = frappe.get_doc(\n        \"Sales Invoice\",\n        doc.name,\n    )\n    \n    original_posting_date = inv_doc.get(\"posting_date\")\n    original_posting_time = inv_doc.get(\"posting_time\")\n    original_due_date = inv_doc.get(\"due_date\")\n    \n\n    if inv_doc:\n        \n        if original_posting_date:\n            doc.posting_date = original_posting_date\n\n        if original_posting_time:\n            doc.posting_time = original_posting_time\n\n        if original_due_date:\n            doc.due_date = original_due_date\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-30 13:07:57.630604",
  "module": "Upande Kaitet",
  "name": "Validate unique bucket ID",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Harvesting\":\n    if not doc.custom_bucket_id:\n        frappe.throw(f\"Bucket ID needed for {doc.stock_entry_type} Stock Entry\")\n        \n\n    if doc.get(\"__islocal\") or doc.has_value_changed(\"custom_bucket_id\"):\n        existing = frappe.db.sql(\"\"\"\n            SELECT name FROM `tabStock Entry` \n            WHERE custom_bucket_id = %s AND name != %s\n        \"\"\", (doc.custom_bucket_id, doc.name or \"\"), as_dict=1)\n    \n        if existing:\n            frappe.throw(f\"The Bucket ID '{doc.custom_bucket_id}' is already in use. Please choose a unique value.\")\n    \n    \n    \nelif doc.stock_entry_type == \"Receiving\" or doc.stock_entry_type == \"Receiving Quarantined\":\n    if not doc.custom_received_bucket_id:\n        frappe.throw(f\"Bucket ID needed for {doc.stock_entry_type} Stock Entry\")\n        \n    if doc.get(\"__islocal\") or doc.has_value_changed(\"custom_received_bucket_id\"):\n        existing = frappe.db.sql(\"\"\"\n            SELECT name FROM `tabStock Entry` \n            WHERE custom_received_bucket_id = %s AND name != %s\n        \"\"\", (doc.custom_received_bucket_id, doc.name or \"\"), as_dict=1)\n    \n        if existing:\n            frappe.throw(f\"The Bucket ID '{doc.custom_received_bucket_id}' is already in use. Please choose a unique value.\")",
  "script_type": "DocType Event"
 }
]