[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-22 13:51:23.012395",
  "module": "Upande Kaitet",
  "name": "Delivery Note Stock Removal",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Ledger Entry",
  "script": "# Skip stock ledger entries for delivery notes with business unit \"Roses\"\nif doc.voucher_type == \"Delivery Note\":\n    dn = frappe.get_doc(\"Delivery Note\", doc.voucher_no)\n    frappe.log_error(\"called stock removal script\")\n    \n    # Check if business unit is \"Roses\" - skip stock movement\n    if dn.get('custom_business_unit') == \"Roses\":\n        frappe.flags.ignore_validate_and_add = True\n        frappe.log_error(\"stock entry halted\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-24 15:11:30.790753",
  "module": "Upande Kaitet",
  "name": "Lock Dates On Submit of Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "if frappe.db.exists(\"Sales Invoice\", doc.name):\n    inv_doc = frappe.get_doc(\n        \"Sales Invoice\",\n        doc.name,\n    )\n    \n    original_posting_date = inv_doc.get(\"posting_date\")\n    original_posting_time = inv_doc.get(\"posting_time\")\n    original_due_date = inv_doc.get(\"due_date\")\n    \n\n    if inv_doc:\n        \n        if original_posting_date:\n            doc.posting_date = original_posting_date\n\n        if original_posting_time:\n            doc.posting_time = original_posting_time\n\n        if original_due_date:\n            doc.due_date = original_due_date\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-07 19:36:20.204848",
  "module": "Upande Kaitet",
  "name": "Validate unique bucket ID",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Harvesting\":\n    if not doc.custom_bucket_id:\n        frappe.throw(f\"Bucket ID needed for {doc.stock_entry_type} Stock Entry\")\n        \n\n    if doc.get(\"__islocal\") or doc.has_value_changed(\"custom_bucket_id\"):\n        existing = frappe.db.sql(\"\"\"\n            SELECT name FROM `tabStock Entry` \n            WHERE custom_bucket_id = %s AND name != %s\n        \"\"\", (doc.custom_bucket_id, doc.name or \"\"), as_dict=1)\n    \n        if existing:\n            frappe.throw(f\"The Bucket ID '{doc.custom_bucket_id}' is already in use. Please choose a unique value.\")\n    \n    \n    \nelif doc.stock_entry_type == \"Receiving\" or doc.stock_entry_type == \"Receiving Quarantined\":\n    if not doc.custom_received_bucket_id:\n        frappe.throw(f\"Bucket ID needed for {doc.stock_entry_type} Stock Entry\")\n        \n    if doc.get(\"__islocal\") or doc.has_value_changed(\"custom_received_bucket_id\"):\n        existing = frappe.db.sql(\"\"\"\n            SELECT name FROM `tabStock Entry` \n            WHERE custom_received_bucket_id = %s AND name != %s\n        \"\"\", (doc.custom_received_bucket_id, doc.name or \"\"), as_dict=1)\n    \n        if existing:\n            frappe.throw(f\"The Bucket ID '{doc.custom_received_bucket_id}' is already in use. Please choose a unique value.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-07 20:55:13.087660",
  "module": "Upande Kaitet",
  "name": "Set Bucket Id Status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Harvesting\":\n\n    bucket_id_doc = frappe.get_doc(\"Bucket QR Code\", doc.custom_bucket_id)\n    bucket_id_doc.last_stock_entry = doc.name\n    bucket_id_doc.status = \"In Use\"\n    \n    bucket_id_doc.save()\n\n\nif doc.stock_entry_type == \"Receiving\":\n    \n    bucket_id_doc = frappe.get_doc(\"Bucket QR Code\", doc.custom_received_bucket_id)\n    bucket_id_doc.status = \"Available\"\n    \n    bucket_id_doc.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_manufacturing_managers",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-03 13:36:36.377565",
  "module": "Upande Kaitet",
  "name": "Filtering based on Role",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def get_manufacturing_managers():\n    user_ids = frappe.get_all(\"Has Role\", filters={\"role\": \"Manufacturing Manager\"}, pluck=\"parent\")\n    \n    if not user_ids:\n        return []\n\n    return frappe.get_all(\n        \"Employee\",\n        filters={\n            \"user_id\": [\"in\", user_ids],\n            \"status\": \"Active\"\n        },\n        pluck=\"name\"\n    )\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "create_repack_entry",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-21 14:20:12.372699",
  "module": "Upande Kaitet",
  "name": "Repack",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "try:\n    material_request = frappe.form_dict.get('material_request')\n    # Get Material Request document\n    mr_doc = frappe.get_doc('Material Request', material_request)\n\n    # Create new Stock Entry\n    stock_entry = frappe.new_doc('Stock Entry')\n    stock_entry.stock_entry_type = 'Yoghurt Packing'\n    stock_entry.company = mr_doc.company\n    stock_entry.custom_farm = mr_doc.custom_farm\n    stock_entry.custom_business_unit = mr_doc.custom_business_unit\n\n    # Link to Material Request\n    stock_entry.custom_material_request = material_request\n    stock_entry.add_comment('Comment', f'Created from Material Request: {material_request}')\n\n    total_qty_kg = 0\n\n    # Add items from Material Request to Stock Entry\n    for item in mr_doc.items:\n        if item.qty and isinstance(item.qty, (int, float)):\n            # First target warehouse (Coldroom or as per Material Request)\n            stock_entry.append('items', {\n                'item_code': item.item_code,\n                'uom': item.uom,\n                'qty': item.qty,\n                't_warehouse': item.warehouse\n            })\n\n            # Second target warehouse (QC Store - fixed 1 piece)\n            stock_entry.append('items', {\n                'item_code': item.item_code,\n                'uom': item.uom,\n                'qty': 1,\n                't_warehouse': 'Yoghurt QC Store - KR'\n            })\n\n            # Get weight per piece (kg) from Item\n            weight_per_piece = frappe.db.get_value('Item', item.item_code, 'custom_weight_per_piece_kg') or 0\n            if not weight_per_piece:\n                frappe.throw(f\"Weight per Piece (kg) is missing for item {item.item_code}. Please set it on the Item master.\")\n\n            # Add to total - FIX IS HERE\n            total_qty_kg = total_qty_kg + (item.qty * weight_per_piece) + (1 * weight_per_piece)\n\n        else:\n            frappe.log_error(f\"Invalid qty for item {item.item_code}\", \"Stock Entry Error\")\n\n    # Save the Stock Entry before adding final product\n    stock_entry.save()\n\n    # Add final product row (source warehouse)\n    if total_qty_kg > 0:\n        stock_entry.append('items', {\n            'item_code': 'Yoghurt Vanilla (kg)',\n            'uom': 'Kilogram',\n            'qty': float(total_qty_kg),\n            's_warehouse': 'Yoghurt/Lala Packing - KR'\n        })\n        stock_entry.save()\n    else:\n        frappe.log_error(\"Total quantity is zero; skipping final product row\", \"Stock Entry Error\")\n\n    # The next two lines are redundant. You already set custom_material_request above.\n    # And the comment is also added above.\n    frappe.db.set_value('Material Request', mr_doc.name, 'custom_repack_stock_entry', stock_entry.name)\n\nexcept Exception as e:\n    error_message = f\"Error creating repack stock entry: {str(e)}\"\n    frappe.throw(f\"Error creating Stock Entry: {e}\")",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "start_trip_transfer",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-29 11:28:34.791786",
  "module": "Upande Kaitet",
  "name": "Start Trip Transfer",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "delivery_trip = frappe.form_dict.get('delivery_trip')\n    \nif not delivery_trip:\n    frappe.throw(\"Delivery Trip parameter is required\")\n\ntrip = frappe.get_doc('Delivery Trip', delivery_trip)\n\nif trip.start_time:\n    frappe.throw(\"Trip already started.\")\n\nfrappe.db.set_value(\"Delivery Trip\", delivery_trip, {\n    \"departure_time\": frappe.utils.now_datetime(),\n    \"status\": \"In Transit\"\n})\nfrappe.db.commit()\n\ntrip.reload()\n\nfor stop in trip.delivery_stops:\n    dn = frappe.get_doc(\"Delivery Note\", stop.delivery_note)\n    for item in dn.items:\n        stock_entry = frappe.new_doc(\"Stock Entry\")  # Only pass the Doctype name\n        stock_entry.stock_entry_type = \"Material Transfer\"\n        stock_entry.company = dn.company\n        stock_entry.custom_farm = dn.custom_farm\n        stock_entry.custom_business_unit = dn.custom_business_unit\n        \n        stock_entry.append(\"items\", {\n            \"item_code\": item.item_code,\n            \"qty\": item.qty,\n\n            # PLace this somewhere editable\n            # Can fetch it from delvery note in the client script and pass \n            # it here \n            \"s_warehouse\": \"Yogurt Coldroom - KR\",\n            \"t_warehouse\": \"Goods In Transit - KR\",\n            \n        })\n        \n        stock_entry.insert(ignore_permissions=True)\n        stock_entry.submit()",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "end_trip_transfer",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-29 11:28:28.648114",
  "module": "Upande Kaitet",
  "name": "End Trip Transfer",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "delivery_trip = frappe.form_dict.get('delivery_trip')\n\ntrip = frappe.get_doc('Delivery Trip', delivery_trip)\n\nif trip.status != \"In Transit\":\n    frappe.throw(\"Trip must be In Transit to end\")\n\nif trip.end_time:\n    frappe.throw(\"Trip already completed\")\n    \nfrappe.db.set_value(\"Delivery Trip\", delivery_trip, {\n    \"custom_arrival_time\": frappe.utils.now_datetime(),\n    \"status\": \"Delivered\"\n})\nfrappe.db.commit()\n\ntrip.reload()\n\n# Get all delivery notes in this trip and add their items\nfor stop in trip.delivery_stops:\n    dn = frappe.get_doc(\"Delivery Note\", stop.delivery_note)\n    \n    for item in dn.items:\n        stock_entry = frappe.new_doc(\"Stock Entry\")\n        stock_entry.stock_entry_type = \"Material Transfer\"\n        stock_entry.company = dn.company\n        stock_entry.custom_farm = dn.custom_farm\n        stock_entry.custom_business_unit = dn.custom_business_unit\n        \n        stock_entry.append(\"items\", {\n            \"item_code\": item.item_code,\n            \"qty\": item.qty,\n            \n            # Make it easily editable\n            # Pass from client script\n            \"s_warehouse\": \"Goods In Transit - KR\",\n            \"t_warehouse\": \"Yoghurt Karen Store - KR\"\n        })\n\nstock_entry.insert()\nstock_entry.submit()\n\n# return \"Trip completed and yoghurt moved to Karen Yoghurt Store\"",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "add_gps_reading",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-17 08:35:33.822238",
  "module": "Fleet Management",
  "name": "Gps",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "try:\n    # First check content type\n    if not frappe.request.content_type or 'application/json' not in frappe.request.content_type:\n        frappe.throw(\n            \"Request must be JSON with Content-Type: application/json\",\n            exc=frappe.InvalidContentType\n        )\n\n    data = frappe.request.get_json()\n    \n    # Validate required fields\n    required_fields = ['longitude', 'latitude']\n    for field in required_fields:\n        if field not in data:\n            frappe.throw(f\"Missing required field: {field}\")\n\n    # Create document\n    doc = frappe.get_doc({\n        \"doctype\": \"GPS Readings\",\n        \"geolocation_zwck\": f\"{data['latitude']},{data['longitude']}\",\n        \"table_dgzd\": [{\n            \"longitude\": data['longitude'],\n            \"latitude\": data['latitude'],\n            \"timestamp\": data.get('timestamp'),\n            \"imei\": data.get('imei', ''),\n            \"date\": data.get('date')\n        }]\n    }).insert()\n\n    frappe.response.update({\n        \"status\": \"success\",\n        \"message\": \"GPS Reading created successfully\",\n        \"data\": {\n            \"name\": doc.name,\n            \"location\": doc.geolocation_zwck\n        }\n    })\n\nexcept frappe.InvalidContentType:\n    frappe.response.update({\n        \"status\": \"error\",\n        \"message\": \"Invalid content type - please send with Content-Type: application/json\"\n    })\n    frappe.response.http_status_code = 415\n\nexcept Exception as e:\n    frappe.log_error(title=\"GPS API Error\", message=str(e)[:130])\n    frappe.response.update({\n        \"status\": \"error\",\n        \"message\": \"Failed to process request\"\n    })\n    frappe.response.http_status_code = 500",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-08 18:21:59.447735",
  "module": "Upande Kaitet",
  "name": "Create delivery trip",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "if doc.workflow_state == \"In Transit\":\n    \n    \n    \n    # Create Delivery Trip and start trip\n    delivery_trip = frappe.new_doc(\"Delivery Trip\")\n    \n    delivery_trip.company = doc.company\n    delivery_trip.custom_farm = doc.custom_farm\n    delivery_trip.custom_business_unit = doc.custom_business_unit\n    delivery_trip.driver = doc.custom_departing_driver\n    delivery_trip.driver_name = doc.custom_departing_driver_name\n    delivery_trip.vehicle = doc.custom_departing_vehicle\n    delivery_trip.departure_time = doc.custom_departing_time\n\n    customer_doc = frappe.get_doc(\"Customer\", doc.customer)\n    customer_address = customer_doc.customer_primary_address\n    \n    delivery_trip.append(\"delivery_stops\", {\n        \"customer\": doc.customer,\n        \"address\": customer_address,\n        \"delivery_note\": doc.name\n    })\n\n    for stop in delivery_trip.delivery_stops:\n        dn = frappe.get_doc(\"Delivery Note\", stop.delivery_note)\n        for item in dn.items:\n            stock_entry = frappe.new_doc(\"Stock Entry\")  # Only pass the Doctype name\n            stock_entry.stock_entry_type = \"Material Transfer\"\n            stock_entry.company = dn.company\n            stock_entry.custom_farm = dn.custom_farm\n            stock_entry.custom_business_unit = dn.custom_business_unit\n            \n            stock_entry.append(\"items\", {\n                \"item_code\": item.item_code,\n                \"qty\": item.qty,\n                \"uom\": item.uom,\n    \n                \"s_warehouse\": doc.set_warehouse,\n                \"t_warehouse\": \"Goods In Transit - KR\",\n                \n            })\n            \n            stock_entry.insert(ignore_permissions=True)\n            stock_entry.submit()\n    \n    delivery_trip.insert()\n    delivery_trip.submit()\n    \n    doc.set_warehouse = \"Goods In Transit - KR\"\n    for item in doc.items:\n        item.warehouse = \"Goods In Transit - KR\"\n\n    delivery_trip.db_set(\"status\", \"In Transit\")\n    delivery_trip.reload()\n    \nif doc.workflow_state == \"Arrived\":\n    # End trip and update arrival time\n    delivery_trip_name = frappe.db.get_value(\"Delivery Stop\", \n        {\"delivery_note\": doc.name}, \"parent\")\n        \n    if delivery_trip_name:\n        delivery_trip = frappe.get_doc(\"Delivery Trip\", delivery_trip_name)\n        delivery_trip.custom_arrival_time = frappe.utils.now_datetime()\n        \n        # Update delivery trip status\n        delivery_trip.db_set(\"status\", \"Completed\")\n        delivery_trip.reload()\n    else:\n        frappe.throw(\"No delivery trip found for this delivery note\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-17 12:48:49.840849",
  "module": "Upande Kaitet",
  "name": "Material Issue Notification",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Material Request",
  "script": "# Proceed only if the Material Request is of type Issue\nif doc.material_request_type == \"Material Issue\":\n\n    # Check if any item in the Material Request is Milk\n    milk_found = any(\"Westwood\" in (item.item_code or \"\").lower() for item in doc.items)\n\n    if milk_found:\n        # Get all users with the role \"HOD Dairy\"\n        users = frappe.db.sql(\"\"\"\n            SELECT DISTINCT `tabUser`.name\n            FROM `tabUser`\n            JOIN `tabHas Role` ON `tabHas Role`.parent = `tabUser`.name\n            WHERE `tabHas Role`.role = %s AND `tabUser`.enabled = 1\n        \"\"\", (\"HOD Dairy\",), as_dict=True)\n\n        # Create a notification for each user\n        for user in users:\n            frappe.get_doc({\n                \"doctype\": \"Notification Log\",\n                \"subject\": \"Milk Material Request Submitted\",\n                \"email_content\": f\"A Material Request for Milk has been submitted: <a href='/app/material-request/{doc.name}'>{doc.name}</a>\",\n                \"document_type\": \"Material Request\",\n                \"document_name\": doc.name,\n                \"for_user\": user.name,\n                \"type\": \"Alert\"\n            }).insert(ignore_permissions=True)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-03 09:21:35.065278",
  "module": "Upande Kaitet",
  "name": "Work Order, Event; on_submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Work Order",
  "script": "# Trigger on Work Order submit\nif not doc.custom_weighed_amount:\n    frappe.throw(\"Please enter the Weighed Amount before submitting.\")\n\n# Fetch the final stock entry linked to this Work Order\nstock_entry = frappe.get_all(\n    \"Stock Entry\",\n    filters={\"work_order\": doc.name, \"purpose\": \"Manufacture\"},\n    fields=[\"name\"]\n)\n\nif stock_entry:\n    se = frappe.get_doc(\"Stock Entry\", stock_entry[0][\"name\"])\n\n    for item in se.items:\n        if item.is_finished_item:\n            weighed_qty = doc.custom_weighed_amount\n\n            # Convert if needed\n            if item.stock_uom != doc.fg_uom:\n                conversion_factor = frappe.get_value(\"UOM Conversion Detail\", {\n                    \"parent\": item.item_code,\n                    \"uom\": doc.fg_uom\n                }, \"conversion_factor\")\n\n                if not conversion_factor:\n                    frappe.throw(f\"No UOM conversion defined from {doc.fg_uom} to {item.stock_uom} for item {item.item_code}\")\n\n                weighed_qty = weighed_qty * conversion_factor\n\n            item.qty = weighed_qty\n            item.transfer_qty = weighed_qty\n\n    se.save()\n    frappe.msgprint(f\"Updated Stock Entry {se.name} with weighed quantity.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "request_concession",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-03 14:22:39.192177",
  "module": "Upande Kaitet",
  "name": "Request Concession",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def request_concession(quality_inspection_name):\n    try:\n        # Log the initial step\n        frappe.logger().info(f\"Requesting concession for {quality_inspection_name}\")\n        \n        # Update the Quality Inspection document\n        result = frappe.db.set_value(\"Quality Inspection\", quality_inspection_name, {\n            \"status\": \"Accepted\",\n            \"concession_requested\": 1\n        })\n\n        # Log the result of the update\n        frappe.logger().info(f\"Update result: {result}\")\n        \n        frappe.msgprint(f\"Concession requested successfully for {quality_inspection_name}. Status updated to Accepted.\")\n        return {\"success\": True, \"message\": f\"Updated {quality_inspection_name}\"}\n    except Exception as e:\n        frappe.log_error(message=str(e), title=\"Concession Request Error\")\n        return {\"success\": False, \"message\": f\"Error: {str(e)}\"}\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-03 10:32:58.801393",
  "module": "Upande Kaitet",
  "name": "FPL Block New Version",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "# Server Script: Farm Pack List Validation\n# DocType: Farm Pack List\n# Event: Before Save\n# Script Type: Server\n\n# Calculate completion percentage\npacked_stems = int(doc.custom_total_stems or 0)\nrequired_stems = int(doc.custom_picked_total_stems or 0)\ncompletion_percentage = 0\n\nif required_stems > 0:\n    completion_percentage = (packed_stems / required_stems) * 100\n    doc.custom_completion_percentage = completion_percentage\n\n# Validate when moving from Draft to Pending Order Review\nif doc.workflow_state == \"Pending Order Review\" and doc.get_doc_before_save().workflow_state == \"Draft\":\n    if completion_percentage < 100:\n        # Check if this was initiated via the Authorize Under Pack button\n        # We'll identify this by the presence of the under_pack_reason\n        if not doc.custom_under_pack_reason:\n            message = f\"\"\"\n                <b>This Farm Pack List cannot be sent for review before all ordered stems are packed.</b><br><br>\n                Packed Stems: <b>{packed_stems}</b><br>\n                Required Stems (from Order Pick List): <b>{required_stems}</b><br>\n                Packing Completion: <b>{round(completion_percentage, 2)}%</b><br><br>\n                If you cannot complete this packing, please add an Under Pack Reason and use the \"Authorise Under Pack\" button.\n                \"\"\"\n            frappe.throw(message)\n    elif completion_percentage > 100:\n        frappe.throw(\"You have over packed!\")\n\n# Validate when moving from Pending Order Review to Reviewed\nelif doc.workflow_state == \"Reviewed\" and doc.get_doc_before_save().workflow_state == \"Pending Order Review\":\n    if completion_percentage < 100:\n        # Check if this has been approved via our custom function\n        comments = frappe.get_all(\"Comment\", \n            filters={\n                \"reference_doctype\": \"Farm Pack List\",\n                \"reference_name\": doc.name,\n                \"content\": [\"like\", \"%Under Pack approved by%\"]\n            },\n            fields=[\"name\"]\n        )\n        \n        # If no approval comments exist, block the action\n        if not comments:\n            message = f\"\"\"\n                <b>You cannot approve this under-packed Farm Pack List without proper authorization.</b><br><br>\n                Packed Stems: <b>{packed_stems}</b><br>\n                Required Stems (from Order Pick List): <b>{required_stems}</b><br>\n                Completion: <b>{round(completion_percentage, 2)}%</b><br><br>\n                This document requires approval using the \"Approve Under Pack\" button by a Sales Manager.\n                \"\"\"\n            frappe.throw(message)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-07 20:02:58.247950",
  "module": "Upande Kaitet",
  "name": "Stock Entry Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Harvesting\") or (doc.stock_entry_type == \"Receiving\") or (doc.stock_entry_type == \"Grading\"):\n    doc.submit()\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-07 19:59:42.707818",
  "module": "Upande Kaitet",
  "name": "Stock Entry After Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\":\n    name = doc.name\n    \n    if frappe.db.exists(\"QR Code\", name):\n        frappe.delete_doc(\"QR Code\", name)\n    \n    if doc.custom_bunch_qr_code:\n        qr_code_doc = frappe.get_doc({\n            \"doctype\": \"QR Code\",  \n            \"stock_entry\": doc.name,\n            \"qr_code_image\": doc.custom_bunch_qr_code,  \n        })\n        qr_code_doc.insert()\n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-10 19:09:36.608374",
  "module": "Upande Kaitet",
  "name": "Harvest Stock Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Harvest",
  "script": "stock_entry = frappe.new_doc(\"Stock Entry\")\nfarm_doc = frappe.get_doc(\"Farm\", doc.farm)\n\n\n\nstock_entry.stock_entry_type = \"Harvesting\"\nstock_entry.company = farm_doc.company\nstock_entry.custom_farm = doc.farm\nstock_entry.custom_greenhouse = doc.block\nstock_entry.custom_block__bed_number = doc.bay\nstock_entry.custom_harvester = doc.harvester\nstock_entry.custom_bucket_id = doc.bucket_id\nstock_entry.to_warehouse = doc.block\nstock_entry.custom_stem_length = doc.stem_length\n\n\nstock_entry.custom_business_unit = \"Roses\"\n\n\nstock_entry.append(\"items\", {\n    \"item_code\": doc.item_code,\n    \"qty\": doc.quantity\n})\n\n\nstock_entry.insert()\nstock_entry.submit()\n\nfrappe.msgprint(f\"Stock Entry {stock_entry.name} created successfully.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-08 07:33:11.147824",
  "module": "Upande Kaitet",
  "name": "Automate Rejects Material Issue",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Field Rejects\"):\n    farm = doc.custom_farm\n    \n    farm_doc = frappe.get_doc(\"Farm\", farm)\n    items = []\n    for item in doc.items:\n        item_dict = {\n            \"item_code\": item.item_code,\n            \"qty\": item.qty,\n            \"s_warehouse\": None,\n            \"t_warehouse\": item.t_warehouse,\n            \"custom_rejection_reason\": item.custom_rejection_reason,\n            \"custom_bay\": item.custom_bay\n        }\n        \n        items.append(item_dict)\n        \n    \n    if items:\n        material_issue = frappe.get_doc({\n            \"doctype\": \"Stock Entry\",\n            \"stock_entry_type\": \"Field Rejects Material Issue\",\n            \"custom_farm\": farm,\n            \"company\": farm_doc.company,\n            \"items\": []\n        })\n\n        for item in items:\n            material_issue.append(\"items\", {\n                \"item_code\": item[\"item_code\"],\n                \"qty\": item[\"qty\"],\n                \"s_warehouse\": item[\"t_warehouse\"],\n                \"t_warehouse\": None,\n                \"custom_rejection_reason\": item[\"custom_rejection_reason\"],\n                \"custom_bay\": item[\"custom_bay\"]\n            })\n\n        material_issue.insert()\n        \n        material_issue.set_posting_time = 1 \n        material_issue.posting_date = doc.posting_date\n        material_issue.posting_time = doc.posting_time\n        \n        material_issue.submit()\n        \n        # Save the name of the document of material issue in the Stock Entry Doc\n        \n        frappe.msgprint(f\"Field Rejects Material Issue {material_issue.name} created successfully.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-13 15:22:21.933484",
  "module": "Upande Kaitet",
  "name": "Create Box Labels",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "# if doc.workflow_state == \"Submitted\" and doc.get_doc_before_save().workflow_state == \"Draft\":\n\n\npack_list_items = doc.pack_list_item\nsales_order_id = doc.custom_sales_order\n\n# Get the farm from the item table of the fpl\nfarm_warehouse = pack_list_items[0].source_warehouse\nfarm = farm_warehouse.split()[0]\n\n\nopl = frappe.db.sql(\"\"\"\n    SELECT p.name \n    FROM `tabOrder Pick List` p\n    JOIN `tabPick List Item` i ON i.parent = p.name\n    WHERE p.sales_order = %s\n    AND i.warehouse = %s\n    AND i.idx = 1\n    LIMIT 1\n\"\"\", (sales_order_id, f'{farm} Available for Sale - KR'), as_dict=1)\n    \n\nsales_order_doc = frappe.get_doc(\n        \"Sales Order\", sales_order_id\n    )\n    \n    \nif opl:\n    opl_doc = frappe.get_doc(\"Order Pick List\", opl[0].name)\n    \n    \n    \n    for item in pack_list_items:\n        # Check if a box label doc matching the opl used exists,\n        existing_labels = frappe.get_list(\n                \"Box Label\",\n                filters = {\n                    \"order_pick_list\": opl_doc.name\n                }\n            )\n            \n\n        \n        if not existing_labels:\n            total_stems = 0\n            box_1_items = []    \n            \n            for row in pack_list_items:\n                if row.box_id == \"1\":\n                    box_1_items.append({\n                        \"item_code\": row.item_code,\n                        \"bunch_uom\": row.bunch_uom,\n                        \"bunch_qty\": row.bunch_qty\n                    })\n                    total_stems = total_stems + row.custom_number_of_stems\n            \n            \n            new_label = frappe.new_doc(\"Box Label\")\n            \n            new_label.customer = doc.custom_customer\n            new_label.box_number = 1\n            new_label.order_pick_list = opl_doc.name\n            new_label.pack_rate = total_stems\n            new_label.date = opl_doc.date_created\n            new_label.customer_purchase_order = sales_order_doc.po_no\n            new_label.consignee = sales_order_doc.custom_consignee\n            new_label.truck_details =  sales_order_doc.custom_truck_details\n            new_label.farm_pack_list_link = doc.name\n            new_label.length = pack_list_items[0].stem_length\n            \n            # Add QR Code with link of box labels\n            \n            \n            for fpl_item in box_1_items:\n                new_label.append(\"box_item\", {\n                    \"variety\": fpl_item[\"item_code\"],\n                    \"uom\": fpl_item[\"bunch_uom\"],\n                    \"qty\": fpl_item[\"bunch_qty\"]\n                })\n            \n            \n            new_label.insert()\n            \n        \n        if existing_labels:\n            # Check the number of box labels existing\n            # Create the next box label (box number = number of existing box labels + 1 )\n            # Filter that box number items in the fpl just like the box_1_items\n            # Next add the details just like box_1 was added.\n            # If there is no next box label, stop\n            existing_box_count = len(existing_labels)\n            box_number = existing_box_count + 1\n            \n            total_stems = 0\n            box_items = []\n            \n            for row in pack_list_items:\n                if row.box_id == f\"{box_number}\":\n                    box_items.append({\n                        \"item_code\": row.item_code,\n                        \"bunch_uom\": row.bunch_uom,\n                        \"bunch_qty\": row.bunch_qty\n                    })\n                    total_stems = total_stems + row.custom_number_of_stems\n            \n        \n            if len(box_items) > 0:\n\n                new_label = frappe.new_doc(\"Box Label\")\n        \n                new_label.customer = doc.custom_customer\n                new_label.box_number = box_number\n                new_label.order_pick_list = opl_doc.name\n                new_label.pack_rate = total_stems\n                new_label.date = opl_doc.date_created\n                new_label.customer_purchase_order = sales_order_doc.po_no\n                new_label.consignee = sales_order_doc.custom_consignee\n                new_label.truck_details = sales_order_doc.custom_truck_details\n                new_label.farm_pack_list_link = doc.name\n                new_label.length = pack_list_items[0].stem_length\n            \n                for fpl_item in box_items:\n                    new_label.append(\"box_item\", {\n                        \"variety\": fpl_item[\"item_code\"],\n                        \"uom\": fpl_item[\"bunch_uom\"],\n                        \"qty\": fpl_item[\"bunch_qty\"]\n                    })\n                    \n                # Save the new box label\n                new_label.insert()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-07 19:59:15.828865",
  "module": "Upande Kaitet",
  "name": "Update Grading Forecast Tracker",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading Forecast\":\n    farm = doc.custom_farm\n    new_tracker_doc = None\n    varieties_in_stock_entry = []\n    \n    for item in doc.items:\n        if item.t_warehouse:\n            varieties_in_stock_entry.append({\n                \"item_code\": item.item_code,\n                \"qty\": item.qty\n            })\n            \n\n    tracker_list = frappe.get_list(\"Grading Forecast Tracker\", fields='name',\n        filters= {\n            'farm': farm\n        })\n\n    if len(tracker_list) < 1:\n        new_tracker_doc = frappe.new_doc(\"Grading Forecast Tracker\")\n        \n        new_tracker_doc.farm = farm\n        new_tracker_doc.insert()\n        \n        for item in varieties_in_stock_entry:\n            item_found = False\n    \n            for tracker_item in new_tracker_doc.items:\n                if tracker_item.variety == item[\"item_code\"]:\n                    tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + item[\"qty\"]\n                    item_found = True\n                    break\n    \n            if not item_found:\n                new_tracker_doc.append(\"items\", {\n                    \"variety\": item[\"item_code\"],\n                    \"qty_deficit_in_forecast\": item[\"qty\"]\n                })\n        \n        new_tracker_doc.save()\n\n    if len(tracker_list) > 0:\n        existing_tracker = frappe.get_doc(\"Grading Forecast Tracker\", farm)\n        \n        for item in varieties_in_stock_entry:\n            item_found = False\n\n            for tracker_item in existing_tracker.items:\n                if tracker_item.variety == item[\"item_code\"]:\n                    tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + item[\"qty\"]\n                    item_found = True\n                    break\n\n            if not item_found:\n                new_item_row = existing_tracker.append(\"items\", {\n                    \"variety\": item[\"item_code\"],\n                    \"qty_deficit_in_forecast\": item[\"qty\"]\n                })\n        \n        # After updating items, save the existing tracker\n        existing_tracker.save()\n        \n\n    \n\n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-11 12:14:56.911903",
  "module": "Upande Kaitet",
  "name": "Update Sales Order ID on Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consolidated Pack List",
  "script": "if doc.items:\n    for item in doc.items:\n        if item.sales_order_id:\n            doc.custom_sales_order_id_cpl = item.sales_order_id\n            break\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-07 19:58:47.748614",
  "module": "Upande Kaitet",
  "name": "Update Forecast Tracker (During Grading)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\":\n    # Remove the variety and quantity to go and pay for the debt in forecast while\n    variety_in_stock_entry = []\n    farm = doc.custom_farm\n    \n    abbr_obj = {\n        \"Burguret\": \"BUR\",\n        \"Pendekeza\": \"PNDK\",\n        \"Turaco\": \"TUR\",\n    }\n    \n    for item in doc.items:\n        variety_in_stock_entry.append({\n            \"item_code\": item.item_code,\n            \"qty\": item.transfer_qty\n        })\n\n    existing_tracker = frappe.get_doc(\"Grading Forecast Tracker\", farm)\n    items_to_transfer = []\n    \n    for item in variety_in_stock_entry:\n        item_found = False\n\n        # Loop through existing tracker items to find a match by item_code\n        for tracker_item in existing_tracker.items:\n            if tracker_item.variety == item[\"item_code\"]:\n                # Check the balance(qty) in the tracker and pay that, maximum of the qty of stems graded in the stock entry\n                item_found = True\n                if tracker_item.qty_deficit_in_forecast != 0:\n                    deficit = abs(tracker_item.qty_deficit_in_forecast)\n                    transferable_qty = min(item[\"qty\"], deficit)\n        \n                    # Adjust the deficit in the tracker (always move toward zero)\n                    if tracker_item.qty_deficit_in_forecast > 0:\n                        tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast - transferable_qty\n                    else:\n                        tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + transferable_qty\n        \n                    # Append the item to the transfer list\n                    items_to_transfer.append({\n                        \"source_item\": tracker_item.variety,\n                        \"target_item\": f\"{abbr_obj.get(farm)} Forecast Item\",\n                        \"qty\": transferable_qty\n                    })\n\n                break\n            \n\n        # If item_code wasn't found, create a new row in the tracker item table\n        if not item_found:\n            break\n        \n        # After updating items, save the existing tracker\n        existing_tracker.save()\n        \n    if len(items_to_transfer) > 0:\n        # Perform a stock entry called type Forecast Repayment that is repack of variety from {farm} Available for Sale to\n        # {farm} Grading Forecast - TL as variety {farm} Grading Forecast\n        stock_entry = frappe.new_doc(\"Stock Entry\")\n        stock_entry.stock_entry_type = \"Forecast Repayment\"\n        \n        for transfer_item in items_to_transfer:\n            stock_entry.append(\"items\", {\n                \"item_code\": transfer_item[\"source_item\"],  # Source: actual variety\n                \"qty\": transfer_item[\"qty\"],\n                \"s_warehouse\": f\"{farm} Available for Sale - TL\"\n            })\n            stock_entry.append(\"items\", {\n                \"item_code\": transfer_item[\"target_item\"],  # Target: Graded Forecast item\n                \"qty\": transfer_item[\"qty\"],\n                \"t_warehouse\": f\"{abbr_obj.get(farm)} Grading Forecast - TL\"\n            })\n        \n        stock_entry.insert()\n        stock_entry.submit()\n        \n        doc.db_set(\"custom_fc_repayment_doc\", stock_entry.name)\n\n        \n        \n        \n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-07 19:59:05.733361",
  "module": "Upande Kaitet",
  "name": "Update Tracker (During Grading Cancel)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\" and doc.custom_fc_repayment_doc:\n    farm = doc.custom_farm\n    varieties_to_update = []\n    \n    try:\n        repayment_entry = frappe.get_doc(\"Stock Entry\", doc.custom_fc_repayment_doc)\n        tracker_doc = frappe.get_doc(\"Grading Forecast Tracker\", farm)\n        \n        for item in repayment_entry.items:\n            if item.s_warehouse:\n                varieties_to_update.append({\n                    \"item_code\": item.item_code,\n                    \"qty\": item.qty\n                })\n                \n        for update_item in varieties_to_update:\n            for tracker_item in tracker_doc.items:\n                if tracker_item.variety == update_item[\"item_code\"]:\n                    tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + update_item[\"qty\"]\n                    break\n        \n        \n        tracker_doc.save()\n        \n        doc.custom_fc_repayment_doc = None\n\n        if repayment_entry.docstatus == 1:\n            repayment_entry.cancel()\n\n        frappe.msgprint(f\"Linked Forecast Repayment entry {repayment_entry.name} was cancelled.\")\n\n    except Exception as e:\n        frappe.throw(f\"Error Updating Forecast Repayment: {e}\")\n        \n\n# if doc.stock_entry_type == \"Forecast Repayment\":\n#     wh = doc.items[0].s_warehouse or doc.items[0].t_warehouse\n#     farm = wh.split()[0]\n#     varieties_to_update = []\n    \n#     tracker_doc = frappe.get_doc(\"Grading Forecast Tracker\", farm)\n    \n#     for item in doc.items:\n#         if item.s_warehouse:\n#             varieties_to_update.append({\n#                 \"item_code\": item.item_code,\n#                 \"qty\": item.qty\n#             })\n            \n#     for update_item in varieties_to_update:\n#         for tracker_item in tracker_doc.items:\n#             if tracker_item.variety == update_item[\"item_code\"]:\n#                 tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + update_item[\"qty\"]\n#                 break\n    \n    \n#     tracker_doc.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-16 21:56:33.245432",
  "module": "Upande Kaitet",
  "name": "Forecast Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Forecast Entry",
  "script": "grading_forecast_doc = frappe.new_doc(\"Stock Entry\")\ngrading_forecast_doc.stock_entry_type = \"Grading Forecast\"\ngrading_forecast_doc.custom_farm = doc.farm\ngrading_forecast_doc.custom_forecast_entry = doc.name\n\nforecast_varieties = []\ntotal_qty = 0\n\nabbr_mapping = {\n    \"Burguret\": \"BUR\",\n    \"Pendekeza\": \"PNDK\",\n    \"Turaco\": \"TUR\"\n}\n\nfor item in doc.items:\n    total_qty = total_qty + item.qty_in_stems\n    \n    forecast_varieties.append({\n        \"variety\": item.item_code,\n        \"qty\": item.qty_in_stems,\n    })\n    \n    grading_forecast_doc.append(\"items\", {\n        \"item_code\": item.item_code,\n        \"qty\": item.qty_in_stems,\n        \"t_warehouse\": f\"{abbr_mapping.get(doc.farm)} Grading Forecast - TL\", \n        \"uom\": \"Stems\",\n    })\n    \ngrading_forecast_doc.append(\"items\", {\n    \"item_code\": f\"{abbr_mapping.get(doc.farm)} Forecast Item\",\n    \"qty\": total_qty,\n    \"s_warehouse\": f\"{abbr_mapping.get(doc.farm)} Grading Forecast - TL\", \n    \"uom\": \"Stems\",\n})\n\ngrading_forecast_doc.insert()\ngrading_forecast_doc.submit()\n    \n\n\n    \n\n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-07 19:59:09.892677",
  "module": "Upande Kaitet",
  "name": "Update Tracker (Grading Forecast)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading Forecast\":\n    reversed_items = []\n    tracker_doc = frappe.get_doc(\"Grading Forecast Tracker\", doc.custom_farm)\n\n    for item in doc.items:\n        if item.t_warehouse:\n            reversed_items.append({\n                \"item_code\": item.item_code,\n                \"qty\": item.qty\n            })\n            \n            \n    for item in tracker_doc.items:\n        for i in reversed_items:\n            if item.variety == i[\"item_code\"]:\n                item.qty_deficit_in_forecast = item.qty_deficit_in_forecast - i[\"qty\"]\n                break\n            \n    tracker_doc.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-17 00:09:59.723998",
  "module": "Upande Kaitet",
  "name": "Allow Packing Of Returned Bunches",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Order Pick List",
  "script": "stock_entries = frappe.get_all(\"Stock Entry\", filters={\"custom_opl_scanned\": doc.name}, fields=[\"name\"])\n\nfor entry in stock_entries:\n    se_doc = frappe.get_doc(\"Stock Entry\", entry.name)\n\n    if se_doc.docstatus == 1:\n        se_doc.db_set(\"custom_scanned_packing\", 0)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-17 06:44:43.654546",
  "module": "Upande Kaitet",
  "name": "Create Invoice From Dispatch Form",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Dispatch Form",
  "script": "# Create invoice from the items in the dispatch form\ninvoice_doc = frappe.new_doc(\"Sales Invoice\")\nso_doc = frappe.get_doc(\"Sales Order\", doc.custom_sales_order)\n\ninvoice_doc.company = doc.company\ninvoice_doc.customer = doc.custom_customer\ninvoice_doc.custom_farm = doc.custom_farm\ninvoice_doc.custom_business_unit = doc.custom_business_unit\ninvoice_doc.due_date = so_doc.delivery_date\n\ndispatch_form_doc_items = doc.dispatch_form_item\n\nfor item in dispatch_form_doc_items:\n    \n    invoice_doc.append(\"items\", {\n        \"item_code\": item.item_code,\n        \"qty\": item.bunch_qty,\n        \"uom\": item.bunch_uom,\n        \n        # Fetch rate from elsewhere\n        # \"rate\": 0.0;\n    })\n    \ninvoice_doc.insert()\n\ndoc.custom_sales_invoice = invoice_doc.name\n\nfrappe.msgprint(\n    msg=f\"\"\"\n    <div style=\"text-align: center; padding: 10px;\">\n        <h4 style=\"color: #28a745; margin-bottom: 15px;\">✅ Invoice Created Successfully!</h4>\n        <p style=\"margin-bottom: 15px;\">Sales Invoice <strong>{invoice_doc.name}</strong> has been created.</p>\n        <a href=\"/app/sales-invoice/{invoice_doc.name}\" \n           target=\"_blank\" \n           class=\"btn btn-primary btn-sm\" \n           style=\"background-color: #2490ef; border-color: #2490ef; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; display: inline-block;\">\n           📄 Open Invoice\n        </a>\n    </div>\n    \"\"\",\n    title=\"Success\",\n    indicator=\"green\"\n)\n\n# frappe.db.commit()\n\n# frappe.local.response[\"type\"] = \"redirect\"\n# frappe.local.response[\"location\"] = f\"/app/invoice/{invoice_doc.name}\"\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-22 17:27:31.349103",
  "module": "Upande Kaitet",
  "name": "Create Field Reject Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Rejects",
  "script": "if doc.action == \"Field Rejects\":\n    entry_doc = frappe.new_doc(\"Stock Entry\")\n    farm_doc = frappe.get_doc(\"Farm\", doc.farm)\n    \n\n    entry_doc.stock_entry_type = \"Field Rejects\"\n    entry_doc.company = farm_doc.company\n    entry_doc.custom_farm = doc.farm\n    entry_doc.custom_greenhouse = doc.greenhouse\n    entry_doc.custom_field_reject_entry = doc.name\n    \n    # Roses because field rejects are for flowers only\n    entry_doc.custom_business_unit = \"Roses\"\n    \n    for item in doc.items:\n        entry_item = entry_doc.append(\"items\", {})\n        entry_item.t_warehouse = doc.greenhouse\n        entry_item.item_code = item.variety\n        entry_item.qty = item.no_of_stems\n        entry_item.custom_rejection_reason = item.rejection_reason\n        \n        if not item.rejection_reason:\n            frappe.throw(\"Please open table and select rejection reason\")\n\n    entry_doc.save()\n    entry_doc.submit()\n    \nif doc.action == \"Quarantine Rejects\":\n    entry_doc = frappe.new_doc(\"Stock Entry\")\n    farm_doc = frappe.get_doc(\"Farm\", doc.farm)\n    \n    entry_doc.stock_entry_type = \"Quarantine Rejects\"\n    entry_doc.company = farm_doc.company\n    entry_doc.custom_farm = doc.farm\n    entry_doc.custom_field_reject_entry = doc.name\n    \n    # Roses because field rejects are for flowers only\n    entry_doc.custom_business_unit = \"Roses\"\n    \n    for item in doc.items:\n        entry_item = entry_doc.append(\"items\", {})\n        entry_item.s_warehouse = f'{doc.farm} Receiving Cold Store - KR'\n        entry_item.item_code = item.variety\n        entry_item.qty = item.no_of_stems\n        entry_item.custom_rejection_reason = item.quarantine_rejection_reason\n        \n        if not item.quarantine_rejection_reason:\n            frappe.throw(\"Please open table and select rejection reason\")\n\n    entry_doc.save()\n    entry_doc.submit()\n    \nif doc.action == \"Packhouse Rejects\":\n    entry_doc = frappe.new_doc(\"Stock Entry\")\n    farm_doc = frappe.get_doc(\"Farm\", doc.farm)\n    \n    entry_doc.stock_entry_type = \"Packhouse Rejects\"\n    entry_doc.company = farm_doc.company\n    entry_doc.custom_farm = doc.farm\n    entry_doc.custom_field_reject_entry = doc.name\n    \n    # Roses because field rejects are for flowers only\n    entry_doc.custom_business_unit = \"Roses\"\n    \n    for item in doc.items:\n        entry_item = entry_doc.append(\"items\", {})\n        entry_item.s_warehouse = f'{doc.farm} Receiving Cold Store - KR'\n        entry_item.item_code = item.variety\n        entry_item.qty = item.no_of_stems\n        entry_item.custom_rejection_reason = item.packhouse_rejection_reason\n\n        if not item.packhouse_rejection_reason:\n            frappe.throw(\"Please open table and select rejection reason\")\n    entry_doc.save()\n    entry_doc.submit()\n    \n    \nif doc.action == \"Delivery Rejects\":\n    entry_doc = frappe.new_doc(\"Stock Entry\")\n    farm_doc = frappe.get_doc(\"Farm\", doc.farm)\n    \n    entry_doc.stock_entry_type = \"Delivery Rejects\"\n    entry_doc.company = farm_doc.company\n    entry_doc.custom_farm = doc.farm\n    entry_doc.custom_field_reject_entry = doc.name\n    \n    # Roses because field rejects are for flowers only\n    entry_doc.custom_business_unit = \"Roses\"\n    \n    for item in doc.items:\n        entry_item = entry_doc.append(\"items\", {})\n        entry_item.s_warehouse = f'{doc.farm} Graded Sold - KR'\n        entry_item.t_warehouse = f'{doc.farm} Graded Sold - KR'\n        entry_item.item_code = item.variety\n        entry_item.qty = item.no_of_stems\n        entry_item.custom_rejection_reason = item.delivery_rejection_reason\n        \n        if not item.delivery_rejection_reason:\n            frappe.throw(\"Please open table and select rejection reason\")\n\n    entry_doc.save()\n    entry_doc.submit()\n    \n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-20 17:20:32.142665",
  "module": "Upande Kaitet",
  "name": "Create Sales Invoice",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Delivery Note",
  "script": "customer_doc = frappe.get_doc(\"Customer\", doc.customer)\n\nif not customer_doc.is_internal_customer:\n    # Create sales invoice\n    new_doc = frappe.new_doc(\"Sales Invoice\")\n    new_doc.customer = doc.customer\n    new_doc.custom_farm = doc.custom_farm\n    new_doc.custom_business_unit = doc.custom_business_unit\n    new_doc.custom_delivery_note_no = doc.name\n    new_doc.company = \"Karen Roses\"\n    \n    items_array = doc.items\n    \n    for item in items_array:\n        new_doc.append(\"items\", {\n            \"item_code\": item.item_code,\n            \"uom\": item.uom,\n            \"qty\": item.qty,\n            \"rate\": item.rate,\n            \"custom_length\": item.custom_length,\n        })\n        \n    \n    new_doc.save()\n    \n    # Create a beautiful clickable message with black theme\n    invoice_link = f\"/app/sales-invoice/{new_doc.name}\"\n    \n    frappe.msgprint(\n        msg=f\"\"\"\n        <div style=\"text-align: center; padding: 24px; background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 50%, #1a1a1a 100%); \n                    border-radius: 16px; color: #ffffff; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                    border: 1px solid #333333; box-shadow: 0 20px 40px rgba(0,0,0,0.3);\">\n            <div style=\"font-size: 28px; margin-bottom: 12px; color: #00ff88;\">\n                ✅ Success!\n            </div>\n            <div style=\"font-size: 16px; margin-bottom: 24px; color: #e0e0e0; font-weight: 400;\">\n                Sales Invoice has been created successfully\n            </div>\n            <a href=\"{invoice_link}\" \n               style=\"display: inline-block; padding: 14px 28px; background: linear-gradient(135deg, #333333 0%, #4a4a4a 100%); \n                      color: #ffffff; text-decoration: none; border-radius: 30px; font-weight: 600; \n                      border: 2px solid #555555; transition: all 0.3s ease;\n                      box-shadow: 0 8px 16px rgba(0,0,0,0.2);\n                      backdrop-filter: blur(10px);\"\n               onmouseover=\"this.style.background='linear-gradient(135deg, #00ff88 0%, #00cc6a 100%)'; \n                           this.style.transform='translateY(-3px)'; \n                           this.style.boxShadow='0 12px 24px rgba(0,255,136,0.2)';\n                           this.style.borderColor='#00ff88';\"\n               onmouseout=\"this.style.background='linear-gradient(135deg, #333333 0%, #4a4a4a 100%)'; \n                          this.style.transform='translateY(0px)'; \n                          this.style.boxShadow='0 8px 16px rgba(0,0,0,0.2)';\n                          this.style.borderColor='#555555';\">\n                📄 View Invoice {new_doc.name}\n            </a>\n            <div style=\"margin-top: 16px; font-size: 12px; color: #888888; opacity: 0.8;\">\n                Click the button above to open the invoice\n            </div>\n        </div>\n        \"\"\",\n        title=\"Invoice Created\",\n        indicator=\"green\"\n    )\n    \n    new_doc.submit()\n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-17 22:21:58.837718",
  "module": "Upande Kaitet",
  "name": "Payroll Access Restriction",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Rejects",
  "script": "if doc.action == \"Field Rejects\":\n    entry_doc = frappe.new_doc(\"Stock Entry\")\n    farm_doc = frappe.get_doc(\"Farm\", doc.farm)\n    \n\n    entry_doc.stock_entry_type = \"Field Rejects\"\n    entry_doc.company = farm_doc.company\n    entry_doc.custom_farm = doc.farm\n    entry_doc.custom_greenhouse = doc.greenhouse\n    entry_doc.custom_field_reject_entry = doc.name\n    \n    # Roses because field rejects are for flowers only\n    entry_doc.custom_business_unit = \"Roses\"\n    \n    for item in doc.items:\n        entry_item = entry_doc.append(\"items\", {})\n        entry_item.t_warehouse = doc.greenhouse\n        entry_item.item_code = item.variety\n        entry_item.qty = item.no_of_stems\n        entry_item.custom_rejection_reason = item.rejection_reason\n        \n        if not item.rejection_reason:\n            frappe.throw(\"Please open table and select rejection reason\")\n\n    entry_doc.save()\n    entry_doc.submit()\n    \nif doc.action == \"Quarantine Rejects\":\n    entry_doc = frappe.new_doc(\"Stock Entry\")\n    farm_doc = frappe.get_doc(\"Farm\", doc.farm)\n    \n    entry_doc.stock_entry_type = \"Quarantine Rejects\"\n    entry_doc.company = farm_doc.company\n    entry_doc.custom_farm = doc.farm\n    entry_doc.custom_field_reject_entry = doc.name\n    \n    # Roses because field rejects are for flowers only\n    entry_doc.custom_business_unit = \"Roses\"\n    \n    for item in doc.items:\n        entry_item = entry_doc.append(\"items\", {})\n        entry_item.s_warehouse = f'{doc.farm} Receiving Cold Store - KR'\n        entry_item.item_code = item.variety\n        entry_item.qty = item.no_of_stems\n        entry_item.custom_rejection_reason = item.quarantine_rejection_reason\n        \n        if not item.quarantine_rejection_reason:\n            frappe.throw(\"Please open table and select rejection reason\")\n\n    entry_doc.save()\n    entry_doc.submit()\n    \nif doc.action == \"Packhouse Rejects\":\n    entry_doc = frappe.new_doc(\"Stock Entry\")\n    farm_doc = frappe.get_doc(\"Farm\", doc.farm)\n    \n    entry_doc.stock_entry_type = \"Packhouse Rejects\"\n    entry_doc.company = farm_doc.company\n    entry_doc.custom_farm = doc.farm\n    entry_doc.custom_field_reject_entry = doc.name\n    \n    # Roses because field rejects are for flowers only\n    entry_doc.custom_business_unit = \"Roses\"\n    \n    for item in doc.items:\n        entry_item = entry_doc.append(\"items\", {})\n        entry_item.s_warehouse = f'{doc.farm} Receiving Cold Store - KR'\n        entry_item.item_code = item.variety\n        entry_item.qty = item.no_of_stems\n        entry_item.custom_rejection_reason = item.packhouse_rejection_reason\n\n        if not item.packhouse_rejection_reason:\n            frappe.throw(\"Please open table and select rejection reason\")\n    entry_doc.save()\n    entry_doc.submit()\n    \n    \nif doc.action == \"Delivery Rejects\":\n    entry_doc = frappe.new_doc(\"Stock Entry\")\n    farm_doc = frappe.get_doc(\"Farm\", doc.farm)\n    \n    entry_doc.stock_entry_type = \"Delivery Rejects\"\n    entry_doc.company = farm_doc.company\n    entry_doc.custom_farm = doc.farm\n    entry_doc.custom_field_reject_entry = doc.name\n    \n    # Roses because field rejects are for flowers only\n    entry_doc.custom_business_unit = \"Roses\"\n    \n    for item in doc.items:\n        entry_item = entry_doc.append(\"items\", {})\n        entry_item.s_warehouse = f'{doc.farm} Graded Sold - KR'\n        entry_item.t_warehouse = f'{doc.farm} Graded Sold - KR'\n        entry_item.item_code = item.variety\n        entry_item.qty = item.no_of_stems\n        entry_item.custom_rejection_reason = item.delivery_rejection_reason\n        \n        if not item.delivery_rejection_reason:\n            frappe.throw(\"Please open table and select rejection reason\")\n\n    entry_doc.save()\n    entry_doc.submit()\n    \n\n\n\n\n",
  "script_type": "DocType Event"
 }
]